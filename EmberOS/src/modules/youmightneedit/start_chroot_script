#!/bin/bash
source /common.sh

set -x
set -e
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH:"}/usr/lib/libeatmydata
export LD_PRELOAD=${LD_PRELOAD:+"$LD_PRELOAD "}libeatmydata.so


# Do these up front,  they will ask for manual intervention.
# Use plugdev, yes to ax25 to non superusers.
if [ -z "$EMBER_MICRO" ]
then
apt-get -y install solaar xastir

cd /build_cache

wget -nc https://openrgb.org/releases/release_0.7/openrgb_0.7_armhf_raspbian_bullseye_6128731.deb
sudo apt-get -y install libhidapi-hidraw0 libc6 libgcc-s1

# This has to be hidden to stop a postinst script from running which doesn't 
# work here and isn't needed.
mv /bin/udevadm hide
dpkg -i openrgb_0.7_armhf_raspbian_bullseye_6128731.deb
mv hide /bin/udevadm
fi


# This IPTV Player is pretty small with lpw dependencies.

cd /build_cache
wget -nc http://packages.linuxmint.com/pool/main/h/hypnotix/hypnotix_2.6_all.deb
! dpkg -i hypnotix_2.6_all.deb
apt -y --fix-broken install





# # Matrix Chat server

# cd /build_cache

# wget -nc https://gitlab.com/famedly/conduit/-/jobs/artifacts/master/raw/conduit-armv7-unknown-linux-gnueabihf?job=build:release:cargo:armv7-unknown-linux-gnueabihf
# conduit-armv7-unknown-linux-gnueabihf

# sudo adduser --system conduit --no-create-home


# cat << EOF > /etc/matrix-conduit/conduit.toml
# [global]
# # The server_name is the name of this server. It is used as a suffix for user
# # and room ids. Examples: matrix.org, conduit.rs
# # The Conduit server needs to be reachable at https://your.server.name/ on port
# # 443 (client-server) and 8448 (federation) OR you can create /.well-known
# # files to redirect requests. See
# # https://matrix.org/docs/spec/client_server/latest#get-well-known-matrix-client
# # and https://matrix.org/docs/spec/server_server/r0.1.4#get-well-known-matrix-server
# # for more information

# # YOU NEED TO EDIT THIS
# #server_name = "your.server.name"

# # This is the only directory where Conduit will save its data
# database_path = "/var/lib/matrix-conduit/conduit_db"

# # The port Conduit will be running on. You need to set up a reverse proxy in
# # your web server (e.g. apache or nginx), so all requests to /_matrix on port
# # 443 and 8448 will be forwarded to the Conduit instance running on this port
# port = 6167

# # Max size for uploads
# max_request_size = 20_000_000 # in bytes

# # Enables registration. If set to false, no users can register on this server.
# allow_registration = true

# # Disable encryption, so no new encrypted rooms can be created
# # Note: existing rooms will continue to work
# allow_encryption = true
# allow_federation = true

# trusted_servers = ["matrix.org"]

# #max_concurrent_requests = 100 # How many requests Conduit sends to other servers at the same time
# #workers = 4 # default: cpu core count * 2

# address = "127.0.0.1" # This makes sure Conduit can only be reached using the reverse proxy

# # The total amount of memory that the database will use.
# #db_cache_capacity_mb = 200
# EOF

# sudo chown -R conduit:nogroup /etc/matrix-conduit
# sudo mkdir -p /var/lib/matrix-conduit/conduit_db
# sudo chown -R conduit:nogroup /var/lib/matrix-conduit/conduit_db

# cat << EOF > /etc/systemd/system/conduit.service
# [Unit]
# Description=Conduit Matrix Server
# After=network.target

# [Service]
# Environment="CONDUIT_CONFIG=/etc/matrix-conduit/conduit.toml"
# User=conduit
# Group=nogroup
# Restart=always
# ExecStart=/usr/local/bin/matrix-conduit

# [Install]
# WantedBy=multi-user.target
# EOF


cat << EOF > /usr/share/applications/BeeBeep.desktop
[Desktop Entry]
Name=BeeBeep
Type=Application
Exec=beebeep
Terminal=false
Categories=Utility;Settings;
EOF


sudo apt-get install -y fwupdate avrdude

#This is supposed to improve resolution of windows network services
sudo apt-get -y install winbind

cat << EOF > /etc/nsswitch.conf
# /etc/nsswitch.conf
#
# Example configuration of GNU Name Service Switch functionality.
# If you have the "glibc-doc-reference" and "info" packages installed, try:
#  info libc "Name Service Switch" for information about this file.

passwd:         files
group:          files
shadow:         files
gshadow:        files

hosts:          files mdns4_minimal [NOTFOUND=return] dns wins
networks:       files

protocols:      db files
services:       db files
ethers:         db files
rpc:            db files

netgroup:       nis
EOF


# FM transmitter TX
cd /build_cache
if [ ! -d /build_cache/fm_transmitter ]
then
git clone https://github.com/markondej/fm_transmitter
fi

cd fm_transmitter
make
cp fm_transmitter /usr/local/bin



cd /build_cache

if [ ! -d /build_cache/nanovna-saver ]
then
git clone --depth 1 https://github.com/NanoVNA-Saver/nanovna-saver /build_cache/nanovna-saver
cd /build_cache/nanovna-saver
else
cd /build_cache/nanovna-saver
git pull --rebase
fi


# This lits us capture frames from DSLRs and the like
sudo apt-get -y install gphoto2
sudo apt-get -y  install libexif12 libgphoto2-6 libgphoto2-port12 libltdl7 gtkam entangle
sudo pip3 install gphoto2

#Get from repos
pip3 install --no-dependencies .

echo "deb http://pkg.sonobus.net/apt stable main" | sudo tee /etc/apt/sources.list.d/sonobus.list
wget -O /etc/apt/trusted.gpg.d/sonobus.gpg https://pkg.sonobus.net/apt/keyring.gpg

cd /build_cache
# tflite tensorflow
echo "deb https://packages.cloud.google.com/apt coral-edgetpu-stable main" | sudo tee /etc/apt/sources.list.d/coral-edgetpu.list
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-get update

# Edge TPU coral accellerator thingy
sudo apt-get -y install libedgetpu1-std


sudo apt-get -y install sonobus soundconverter


# Make it discoverable
cat << EOF > /usr/share/applications/sonobus2.desktop
[Desktop Entry]
Name=Sonobus(JACK enabled)
Icon=audio-card
Type=Application
Exec=pw-jack sonobus
Terminal=false
Categories=AudioVideo
EOF


cat << EOF > /usr/share/applications/qjackctl2.desktop
[Desktop Entry]
Name=Audio Patchbay
Icon=audio-card
Type=Application
Exec=pw-jack qjackctl
Terminal=false
Categories=AudioVideo
EOF


sudo apt-get -y install cec-utils

cd /build_cache

wget -nc https://github.com/smicallef/spiderfoot/archive/v3.5.tar.gz

mkdir /opt/spiderfoot
cp /build_cache/v3.5.tar.gz /opt/spiderfoot/v3.5.tar.gz
cd /opt/spiderfoot
tar zxvf v3.5.tar.gz
ln -s spiderfoot-3.5 latest
cd spiderfoot-3.5
pip3 install -r requirements.txt


cat << EOF > /usr/bin/ember-run-spiderfoot
#!/bin/bash
cd /opt/spiderfoot/latest
xterm -hold -e "python3 ./sf.py -l 127.0.0.1:5001" &
echo "Launching browser.  If you do not have passwordless sudo, enter password and refresh page"
sleep 3
chromium-browser http://localhost:5001
EOF

chmod 755 /usr/bin/ember-run-spiderfoot

cat << EOF > /usr/share/applications/spiderfoot.desktop
[Desktop Entry]
Comment=
Terminal=false
Name=Launch Spiderfoot
Exec=ember-run-spiderfoot
Type=Application
Icon=weather-storm
Categories=Development
EOF



sudo apt-get -y install python3-wxgtk4.0
pip3 install esphomeflasher



cat << EOF > /usr/share/applications/esphomeflasher.desktop
[Desktop Entry]
Comment=
Terminal=false
Name=ESPHome Flasher
Exec=esphomeflasher
Type=Application
Icon=utilities-terminal	
Categories=Development
EOF

apt-get -y install dfu-programmer

sudo apt-get -y install v4l-utils

python3 -m pip install -U yt-dlp

# pip3 install flask
# pip3 install peewee_migrate
# pip3 install pydantic
# sudo apt-get -y install python3-tflite-runtime
# pip3 install ws4py
# echo "VERSION='0.9.4-hackystandalone'" > frigate/version.py

# # $CONFIG_FILE = "/home/daniel/frigate/config.yml"
# cat << EOF > /sketch/frigate/config.yml
# mqtt:
#     host:localhost
# EOF


#Mega GUI apps
if [ -z "$EMBER_MICRO" ]
then
apt-get -y install audacious audacious-plugins tuxguitar zeal inkscape filezilla gimp pulseview qdirstat gthumb simple-scan solaar
! apt-get -y install fbreader
fi

mkdir -p  /home/pi/.config/audacious/

# Important for PipeWire
cat << EOF > /home/pi/.config/audacious/config
[alsa]
mixer=pipewire
mixer-element=Master
pcm=pipewire

[amidiplug]
fsyn_soundfont_file=/usr/share/public.media/emberos/soundfounts/MuseScore_General.sf3;/usr/share/sounds/sf2/default-GM.sf2;/usr/share/sounds/sf3/default-GM.sf3;/usr/share/sounds/sf2/FluidR3_GM.sf2

[audacious]
shuffle=TRUE

[audgui]
filebrowser_win=105,0,1490,922
filesel_path=/usr/share/public.media/emberos
info_win=679,270,560,474

[crossfade]
length=2
manual=FALSE

[gtkui]
column_widths=10,275,175,10,175,175,10,100,46,10,275,275,275,10,275
player_height=1013
player_width=1574
player_x=1811
player_y=724

[gtkui-layout]
item0_name=Album Art
item0_pos=-1,0,0,280,184
item1_name=Search Tool
item1_pos=0,-1,-1,210,912
item_count=2

EOF

#This thing apparently accelerates CPU based deep learning on tensorflow
# apt-get -y install libxnnpack0

apt-get -y install deluge audacity vlc vlc-plugin-base vlc-plugin-access-extra vlc-plugin-jack vlc-plugin-skins2 vlc-plugin-svg

# Set it up for Pipewire
mkdir -p /home/pi/.config/vlc/
cp /filesystem/vlcrc /home/pi/.config/vlc/vlcrc

#See above where we build from source because the dang thing won't let us do it the normal way yet.
#apt-get -y install kodi kodi-pvr-mythtv kodi-pvr-dvbviewer kodi-pvr-iptvsimple

apt-get -y install chromium-browser libreoffice-draw libreoffice-writer libreoffice-calc libreoffice-impress

#Communication and chat
apt-get -y install mumble-server baresip twinkle 

if [ -z "$EMBER_MICRO" ]
then
apt-get -y install pidgin jami jami-daemon mumble qtox 
fi

sudo systemctl disable mumble-server.service




#Coding font
apt-get -y install -y fonts-hack

apt-get -y install nodered


#OpenCV+deps

sudo apt-get -y install python3-opencv libhdf5-dev libhdf5-serial-dev libatlas-base-dev

apt-get -y install chkservice onboard kmag


apt-get -y install gnome-screenshot

#Education
apt-get -y install goldendict goldendict-wordnet 

if [ -z "$EMBER_MICRO" ]
then
apt-get -y install marble-qt marble-maps marble-plugins
fi



apt-get -y install nmap robotfindskitten ncdu mc curl fatrace gstreamer1.0-tools pavucontrol xawtv evince stegosuite unzip

apt-get -y remove qpdfview
apt-get -y install vim-tiny xcas units git wget htop lsof fzf chafa nast git-lfs git-repair xloadimage iotop zenity rename sshpass nethogs

#Enable builtin wordnet, disable the wiktionary service by default because that uses
#Network
mkdir -p /home/pi/.goldendict
cp /filesystem/goldendict_config /home/pi/.goldendict/config


#Do this last, it has a manual prompt

if [ -z "$EMBER_MICRO" ]
then
apt-get install -y cubicsdr xastir antennavis
fi


gtk-update-icon-cache

#This appears to be missing in the latest raspbian?
cat << EOF > /etc/systemd/system/nodered.service
# systemd service file to start Node-RED

[Unit]
Description=Node-RED graphical event wiring tool
Wants=network.target
Documentation=http://nodered.org/docs/hardware/raspberrypi.html

[Service]
Type=simple
# Run as normal pi user - change to the user name you wish to run Node-RED as
User=1000
Group=pi
WorkingDirectory=/home/pi

Environment="NODE_OPTIONS=--max_old_space_size=512"
# uncomment and edit next line if you need an http proxy
#Environment="HTTP_PROXY=my.httpproxy.server.address"
# uncomment the next line for a more verbose log output
#Environment="NODE_RED_OPTIONS=-v"
# uncomment next line if you need to wait for time sync before starting
#ExecStartPre=/bin/bash -c '/bin/journalctl -b -u systemd-timesyncd | /bin/grep -q "systemd-timesyncd.* Synchronized to time server"'


#Make it try to act like a GUI program if it can because some modules might
#make use of that.  Note that this is a bad hack hardcoding the UID.
#Pipewire breaks without it though.
Environment="DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus"
Environment="XDG_RUNTIME_DIR=/run/user/1000"

ExecStart=/usr/bin/pw-jack /usr/bin/env node-red-pi $NODE_OPTIONS $NODE_RED_OPTIONS
#ExecStart=/usr/bin/env node $NODE_OPTIONS red.js $NODE_RED_OPTIONS
# Use SIGINT to stop
KillSignal=SIGINT
# Auto restart on crash
Restart=on-failure
RestartSec=20
# Tag things in the log
SyslogIdentifier=Node-RED
#StandardOutput=syslog


AmbientCapabilities=CAP_NET_BIND_SERVICE CAP_NET_ADMIN CAP_NET_RAW CAP_SYS_TIME CAP_SYS_NICE
SecureBits=keep-caps

LimitRTPRIO= 95
LimitNICE= -20
LimitMEMLOCK= infinity


[Install]
WantedBy=multi-user.target

EOF

yarn global add lodash

yarn global add node-red-contrib-ui
yarn global add --unsafe-perm node-red-node-arduino
yarn global add node-red-dashboard
yarn global add --unsafe-perm node-red-node-serialport
yarn global add node-red-node-smooth
yarn global add node-red-contrib-sun-position
yarn global add node-red-contrib-tasmota
yarn global add node-red-contrib-home-assistant-websocket
yarn global add node-red-contrib-ble-sense
yarn global add @abandonware/noble
yarn global add typescript
yarn global add localtunnel


yarn global add bleno


mkdir -p /home/pi/EspruinoHub

if [ ! -d /build_cache/EspruinoHub ]
then
git clone --depth 1 https://github.com/espruino/EspruinoHub /build_cache/EspruinoHub
cd /build_cache/EspruinoHub
else
cd /build_cache/EspruinoHub
git pull --rebase
fi

#Do the yarn install here, inside the cache folder
yarn install

cd /opt
mkdir -p EspruinoHub
rsync -avz /build_cache/EspruinoHub/ /opt/EspruinoHub/

chown pi EspruinoHub

cd EspruinoHub

# Give Node.js access to Bluetooth
sudo setcap cap_net_raw+eip $(eval readlink -f `which node`)


cat << EOF > /etc/systemd/system/EspruinoHub.service
[Unit]
Description=EspruinoHub BLE -> MQTT bridge
After=nodered.target
Documentation=https://github.com/espruino/EspruinoHub

[Service]
ExecStart=/opt/EspruinoHub/start.sh
WorkingDirectory=/home/pi/EspruinoHub
User=1000
Group=daemon
Nice=10
SyslogIdentifier=EspruinoHub
StandardOutput=syslog
Restart=on-failure
KillSignal=SIGINT

[Install]
WantedBy=multi-user.target
EOF


cd /build_cache

if [ ! -d /build_cache/Armoria ]
then
git clone --recursive --depth 1 https://github.com/Azgaar/Armoria.git

else
cd /build_cache/Armoria
git pull --rebase
fi
cd /build_cache/Armoria
yarn install
npm run build

cat << EOF > /etc/systemd/system/armoria.service
[Unit]
Description=Heraldry web app
After=nodered.target
Documentation=Armoria by Azgaar
[Service]
ExecStart=npm run start
WorkingDirectory=/opt/Armoria
User=1000
Group=daemon
Nice=10
SyslogIdentifier=Armoria
StandardOutput=syslog
Restart=on-failure
KillSignal=SIGINT

[Install]
WantedBy=multi-user.target
EOF


rsync -avz /build_cache/Armoria/ /opt/Armoria/

cd /opt/Armoria/
#No idea why this is needed to fix things
git rm --cached -r .
git reset --hard

chown -R pi /opt/Armoria/

sudo apt-get install -y build-essential libudev-dev



cat << EOF > /etc/systemd/system/rtl_433@.service
[Unit]
Description=RTL_433 service uses an SDR dongle to listen in on transmissions.
After=nodered.target
Documentation=https://github.com/espruino/EspruinoHub

[Service]
ExecStart=rtl_433 -f %i -F json -M utc | mosquitto_pub -t home/rtl_433 -l
User=1000
Nice=10
SyslogIdentifier=RTL433
Restart=on-failure
RestartSec=15

[Install]
WantedBy=multi-user.target
EOF


! apt-get -y install libopus0 libopus-dev
! apt-get -y install multicat gstreamer1.0-rtsp
! pip3 install pymumble


#Make this not fail
! pip3 install deepspeech-tflite


apt-get -y install python3-tflite-runtime
apt-get -y install --no-install-recommends python3-sklearn

apt-get -y install python3-pycoral



cd /build_cache

if [ ! -d /build_cache/zigbee2mqtt ]
then
git clone --recursive --depth 1 https://github.com/Koenkk/zigbee2mqtt.git
else
cd /build_cache/zigbee2mqtt
git pull --rebase
fi


#Do all the install work inside the build cache so it persists
sudo chown -R pi:pi /build_cache/zigbee2mqtt
# Install dependencies (as user "pi")
cd /build_cache/zigbee2mqtt
sudo --user=pi yarn install



mkdir -p /opt/zigbee2mqtt/data
rsync -avz /build_cache/zigbee2mqtt/ /opt/zigbee2mqtt/

#There is a big problem with this, it has an initial build step.
#Which means it needs a *writable* opt.  What a horror!
sudo chown -R pi:pi /opt/zigbee2mqtt









cat << EOF > /etc/systemd/system/zigbee2mqtt.service
[Unit]
Description=zigbee2mqtt
After=network.target fs_bindings.service mosquitto.service

[Service]
ExecStart=/usr/bin/yarn start
WorkingDirectory=/opt/zigbee2mqtt
StandardOutput=null
# Or use StandardOutput=null if you don't want Zigbee2MQTT messages filling syslog, for more options see systemd.exec(5)
StandardError=inherit
Restart=always
RestartSec=30
User=1000

[Install]
WantedBy=multi-user.target
EOF

cat << EOF > /opt/zigbee2mqtt/data/configuration.yaml
# Optional: Home Assistant integration (MQTT discovery) (default: false)
homeassistant: true

# Optional: allow new devices to join.
# WARNING: Disable this after all devices have been paired! (default: false)
permit_join: false

# Required: MQTT settings
mqtt:
  # Required: MQTT base topic for Zigbee2MQTT MQTT messages
  base_topic: zigbee2mqtt
  # Required: MQTT server URL (use mqtts:// for SSL/TLS connection)
  server: 'mqtt://localhost:1883'
  # Optional: absolute path to SSL/TLS certificate of CA used to sign server and client certificates (default: nothing)
  #ca: '/etc/ssl/mqtt-ca.crt'
  # Optional: absolute paths to SSL/TLS key and certificate for client-authentication (default: nothing)
  #key: '/etc/ssl/mqtt-client.key'
  #cert: '/etc/ssl/mqtt-client.crt'
  # Optional: MQTT server authentication user (default: nothing)
  #user: my_user
  # Optional: MQTT server authentication password (default: nothing)
  #password: my_password
  # Optional: MQTT client ID (default: nothing)
  #client_id: 'MY_CLIENT_ID'
  # Optional: disable self-signed SSL certificates (default: true)
  reject_unauthorized: true
  # Optional: Include device information to mqtt messages (default: false)
  include_device_information: true
  # Optional: MQTT keepalive in seconds (default: 60)
  keepalive: 60
  # Optional: MQTT protocol version (default: 4), set this to 5 if you
  # use the 'retention' device specific configuration
  version: 4
  # Optional: Disable retain for all send messages. ONLY enable if you MQTT broker doesn't
  # support retained message (e.g. AWS IoT core, Azure IoT Hub, Google Cloud IoT core, IBM Watson IoT Platform).
  # Enabling will break the Home Assistant integration. (default: false)
  force_disable_retain: false

# Required: serial settings
serial:
  # Required: location of the adapter (e.g. CC2531).
  # To autodetect the port, set 'port: null'.
  #Maybe use /dev/ttyACM0 if autodetect fails
  port: null
  # Optional: disable LED of the adapter if supported (default: false)
  disable_led: false
  # Optional: adapter type, not needed unless you are experiencing problems (default: shown below, options: zstack, deconz)
  #adapter: null

# Optional: Block devices from the network (by ieeeAddr) (default: empty)
# Previously called 'ban' (which is deprecated)
#blocklist:
#  - '0x000b57fffec6a5b2'

# Optional: Allow only certain devices to join the network (by ieeeAddr)
# Note that all devices not on the passlist will be removed from the network!
# (default: empty)
# Previously called 'whitelist' (which is deprecated)
#passlist:
#  - '0x000b57fffec6a5b3'

# Optional: advanced settings
advanced:
  # Optional: ZigBee pan ID (default: shown below)
  # Setting pan_id: GENERATE will make Zigbee2MQTT generate a new panID on next startup
  pan_id: GENERATE
  # Optional: Zigbee extended pan ID (default: shown below)
  #ext_pan_id: [0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD]
  # Optional: ZigBee channel, changing requires re-pairing of all devices. (Note: use a ZLL channel: 11, 15, 20, or 25 to avoid Problems)
  # (default: 11)
  channel: 11
  # Optional: state caching, MQTT message payload will contain all attributes, not only changed ones.
  # Has to be true when integrating via Home Assistant (default: true)
  cache_state: true
  # Optional: persist cached state, only used when cache_state: true (default: true)
  cache_state_persistent: false
  # Optional: send cached state on startup, only used when cache_state_persistent: true (default: true)
  cache_state_send_on_startup: false
  # Optional: Logging level, options: debug, info, warn, error (default: info)
  log_level: info
  # Optional: Location of log directory (default: shown below)
  log_directory: data/log/%TIMESTAMP%
  # Optional: Log file name, can also contain timestamp, e.g.: zigbee2mqtt_%TIMESTAMP%.log (default: shown below)
  log_file: log.txt
  # Optional: Log rotation (default: shown below)
  log_rotation: true
  # Optional: Output location of the log (default: shown below), leave empty to supress logging (log_output: [])
  # possible options: 'console', 'file', 'syslog'
  log_output:
    - console
  # Create a symlink called "current" in the log directory which points to the latests log directory. (default: false)
  log_symlink_current: false
  # Optional: syslog configuration, skip values or entirely to use defaults. Only use when 'syslog' in 'log_output' (see above)
  log_syslog:
    host: localhost # The host running syslogd, defaults to localhost.
    port: 123 # The port on the host that syslog is running on, defaults to syslogd's default port.
    protocol: tcp4 # The network protocol to log over (e.g. tcp4, udp4, tls4, unix, unix-connect, etc).
    path:  /dev/log # The path to the syslog dgram socket (i.e. /dev/log or /var/run/syslog for OS X).
    pid: process.pid # PID of the process that log messages are coming from (Default process.pid).
    facility: local0 # Syslog facility to use (Default: local0).
    localhost: localhost # Host to indicate that log messages are coming from (Default: localhost).
    type: "5424" # The type of the syslog protocol to use (Default: BSD, also valid: 5424).
    app_name: Zigbee2MQTT # The name of the application (Default: Zigbee2MQTT).
    eol: '\n' # The end of line character to be added to the end of the message (Default: Message without modifications).
  # Optional: Baud rate speed for serial port, this can be anything firmware support but default is 115200 for Z-Stack and EZSP, 38400 for Deconz, however note that some EZSP firmware need 57600.
  baudrate: 115200
  # Optional: RTS / CTS Hardware Flow Control for serial port (default: false)
  rtscts: false
  # Optional: soft reset ZNP after timeout (in seconds); 0 is disabled (default: 0)
  soft_reset_timeout: 0
  # Optional: network encryption key, will improve security (Note: changing requires repairing of all devices) (default: shown below)
  # Setting network_key: GENERATE will make Zigbee2MQTT generate a new network key on next startup
  network_key: GENERATE
  # Optional: Add a last_seen attribute to MQTT messages, contains date/time of last Zigbee message
  # possible values are: disable (default), ISO_8601, ISO_8601_local, epoch (default: disable)
  last_seen: 'disable'
  # Optional: Add an elapsed attribute to MQTT messages, contains milliseconds since the previous msg (default: false)
  elapsed: true
  # Optional: Availability timeout in seconds, disabled by default (0).
  # When enabled, devices will be checked if they are still online.
  # Only AC powered routers are checked for availability. (default: 0)
  availability_timeout: 0
  # Optional: Prevent devices from being checked for availability (default: empty)
  # Previously called 'availability_blacklist' (which is deprecated)
  #availability_blocklist:
  #  - DEVICE_FRIENDLY_NAME or DEVICE_IEEE_ADDRESS
  # Optional: Only enable availability check for certain devices (default: empty)
  # Previously called 'availability_whitelist' (which is deprecated)
  #availability_passlist:
  #  - DEVICE_FRIENDLY_NAME or DEVICE_IEEE_ADDRESS
  # Optional: Enables report feature, this feature is DEPRECATED since reporting is now setup by default
  # when binding devices. Docs can still be found here: https://github.com/Koenkk/zigbee2mqtt.io/blob/master/docs/information/report.md
  report: true
  # Optional: Home Assistant discovery topic (default: shown below)
  homeassistant_discovery_topic: 'homeassistant'
  # Optional: Home Assistant status topic (default: shown below)
  homeassistant_status_topic: 'homeassistant/status'
  # Optional: Home Assistant legacy triggers (default: shown below), when enabled:
  # - Zigbee2mqt will send an empty 'action' or 'click' after one has been send
  # - A 'sensor_action' and 'sensor_click' will be discoverd
  homeassistant_legacy_triggers: true
  # Optional: log timestamp format (default: shown below)
  timestamp_format: 'YYYY-MM-DD HH:mm:ss'
  # Optional: configure adapter concurrency (e.g. 2 for CC2531 or 16 for CC26X2R1) (default: null, uses recommended value)
  adapter_concurrent: null
  # Optional: disables the legacy api (default: shown below)
  legacy_api: true
  # Optional: use IKEA TRADFRI OTA test server, see OTA updates documentation (default: false)
  ikea_ota_use_test_url: false

# Optional: experimental options
experimental:
  # Optional: MQTT output type: json, attribute or attribute_and_json (default: shown below)
  # Examples when 'state' of a device is published
  # json: topic: 'zigbee2mqtt/my_bulb' payload '{"state": "ON"}'
  # attribute: topic 'zigbee2mqtt/my_bulb/state' payload 'ON"
  # attribute_and_json: both json and attribute (see above)
  output: 'json'
  # Optional: Transmit power setting in dBm (default: 5).
  # This will set the transmit power for devices that bring an inbuilt amplifier.
  # It can't go over the maximum of the respective hardware and might be limited
  # by firmware (for example to migrate heat, or by using an unsupported firmware).
  # For the CC2652R(B) this is 5 dBm, CC2652P/CC1352P-2 20 dBm.
  #transmit_power: 5

# Optional: networkmap options
map_options:
  graphviz:
    # Optional: Colors to be used in the graphviz network map (default: shown below)
    colors:
      fill:
        enddevice: '#fff8ce'
        coordinator: '#e04e5d'
        router: '#4ea3e0'
      font:
        coordinator: '#ffffff'
        router: '#ffffff'
        enddevice: '#000000'
      line:
        active: '#009900'
        inactive: '#994444'

# Optional: OTA update settings
ota:
    # Minimum time between OTA update checks, see https://www.zigbee2mqtt.io/information/ota_updates.html for more info
    update_check_interval: 1440
    # Disable automatic update checks, see https://www.zigbee2mqtt.io/information/ota_updates.html for more info
    disable_automatic_update_check: true

# Optional: see 'Device specific configuration' below
device_options: {}
# Optional, see 'External converters configuration' below
external_converters: []


frontend:
  port: 8003
  host: 0.0.0.0


EOF


cd /build_cache



mkdir -p /home/pi/AgentDVR/
cd /home/pi/AgentDVR/


echo "To use AgentDVR, Unzip the  arm32 zip file here.  Agent.dll should be directly in this dir." > /home/pi/AgentDVR/README.md
apt-get install -y libtbb-dev libc6-dev gss-ntlmssp libatlas-base-dev

cat << EOF > /etc/systemd/system/AgentDVR.service
[Unit]
Description=AgentDVR
After=systemd-remount-fs.service network-online.target fs_bindings.service

[Service]
# see https://www.ispyconnect.com/userguide-agent-service.aspx for instructions
# systemd will run this executable to start the service. AGENT_LOCATION needs to be the absolute path
# DOT_NET_LOCATION should point to where the dotnet executable is - this might be different on your computer. 
# For Raspberry Pi YOUR_USERNAME is usually pi
#
# eg for Raspberry Pi:	ExecStart=/usr/share/dotnet/dotnet /home/pi/Desktop/Agent/Agent.dll
# eg for Linux:			ExecStart=/usr/bin/dotnet /home/sean/Desktop/Agent/Agent.dll

ExecStart=/opt/dotnet/dotnet /home/pi/AgentDVR/Agent.dll
Environment="DOTNET_CLI_TELEMETRY_OPTOUT=1"
# to query logs using journalctl, set a logical name here
SyslogIdentifier=AgentDVR

# Use your username to keep things simple.
# If you pick a different user, make sure dotnet and all permissions are set correctly to run the app
# To update permissions, use 'chown YOUR_USERNAME -R AGENT_LOCATION' to take ownership of the folder and files

User=1000

# ensure the service automatically restarts
Restart=always
# amount of time to wait before restarting the service                        
RestartSec=5


[Install]
WantedBy=multi-user.target
EOF


#HPs scanner drivers
sudo apt-get -y install hplip hplip-gui sane sane-utils libsane-extras xsane

apt-get -y install npm


#I don't think this makes a difference, we provide our own samba conf
echo "samba-common samba-common/dhcp boolean true" | sudo debconf-set-selections
echo "samba-common samba-common/do_debconf boolean true" | sudo debconf-set-selections


#Add this if it ever gets support
#apt-get -y install rtl8812au-dkms

cd /build_cache

#Now we need Rhasspy
sudo apt-get -y install libgfortran4 supervisor libopenblas-base libffi6 sox jq



cat << EOF > /etc/systemd/system/rhasspy@.service
[Unit]
Description=Rhasspy
After=syslog.target network.target mosquitto.service pipewire-media-session.service pipewire.service


[Service]
Type=simple
ExecStart=/usr/bin/bash -o pipefail -c '{ /usr/bin/rhasspy -p %i --local-mqtt-port 1883 --user-profiles=/home/pi/.config/rhasspy/profiles 2>&1 | cat >&2 3>&-; } 3>&1'

User=1000
Group=pi

#Make it try to act like a GUI program if it can because some modules might
#make use of that.  Note that this is a bad hack hardcoding the UID.
#Pipewire breaks without it though.
Environment="DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus"
Environment="XDG_RUNTIME_DIR=/run/user/1000"
AmbientCapabilities=CAP_SYS_NICE
SecureBits=keep-caps

LimitRTPRIO= 95
LimitNICE= -20
LimitMEMLOCK= infinity

RestartSec=1
Restart=on-failure

StandardOutput=syslog
StandardError=syslog

SyslogIdentifier=rhasspy

[Install]
WantedBy=multi-user.target
EOF

wget -nc https://github.com/rhasspy/rhasspy/releases/latest/download/rhasspy_armhf.deb
dpkg -i rhasspy_armhf.deb

#Gonna do ThingMagic's Mercury API to enable RFID reading
apt-get install -y unzip patch xsltproc gcc libreadline-dev python3-dev python3-setuptools



cd /build_cache

if [ ! -d /build_cache/python-mercuryapi ]
then
git clone --recursive --depth 1 https://github.com/gotthardp/python-mercuryapi.git
cd python-mercuryapi
else
cd python-mercuryapi
git pull --rebase
fi

make install

#Non-superusers can't capture packets
echo "wireshark-common wireshark-common/install-setuid boolean false" | sudo debconf-set-selections

# mkdir -p /opt/ipfs-installer
# cp -ar /filesystem/ipfs-rpi/. /opt/ipfs-installer
# cd /opt/ipfs-installer
# sudo -u pi ./install
# #Give user a way to update
# ln -s /opt/ipfs-installer/ipfs-rpi-0.1.1/install /usr/bin/install-ipfs-rpi
# sudo systemctl disable ipfs-daemon.service






if [ -z "$EMBER_MICRO" ]
then
apt-get -y install wireshark termshark
fi


#Need for cheap USB wifis
apt-get install -y ppp usb-modeswitch wvdial


# OBD Scanner for the ELM tools
apt-get install -y scantool

# Control smart USB hubs per-port power, usb HID relays
apt-get -y install uhubctl usbrelay

apt-get -y install python3-pip libhidapi-libusb0 libxcb-xinerama0


# Video is the closest group i can think of.  It can't just be everyone for security reasons, but it has to be an existing group so that it "just works"
mkdir -p /etc/udev/rules.d
cat << EOF > /etc/udev/rules.d/70-streamdeck.rules
SUBSYSTEM=="usb", ATTRS{idVendor}=="0fd9", ATTRS{idProduct}=="0060", GROUP="video", TAG+="uaccess"
SUBSYSTEM=="usb", ATTRS{idVendor}=="0fd9", ATTRS{idProduct}=="0063", GROUP="video", TAG+="uaccess"
SUBSYSTEM=="usb", ATTRS{idVendor}=="0fd9", ATTRS{idProduct}=="006c", GROUP="video", TAG+="uaccess"
SUBSYSTEM=="usb", ATTRS{idVendor}=="0fd9", ATTRS{idProduct}=="006d", GROUP="video", TAG+="uaccess"
SUBSYSTEM=="usb", ATTRS{idVendor}=="0fd9", ATTRS{idProduct}=="0080", GROUP="video", TAG+="uaccess"
EOF

# Elgato Streamdeck UI support
pip3 install streamdeck
pip3 install streamdeck-ui 

# Elgato keylight support
pip3 install PyElgato


cat << "EOF" > /usr/bin/elgatotui
#!/usr/bin/bash

elgato lights

echo "Press enter for menu"
read

while true
do
TO_RUN=$(whiptail --title "Elgato Keylight" --menu "Choose an option" 25 78 5 \
"1" "Search for lights" \
"2" "Turn on" \
"3" "Turn off" \
"4" "Brighter" \
"5" "Dimmer" \
"6" "Warmer" \
"7" "Cooler" \
"Exit" "Exit" 3>&1 1>&2 2>&3)

case $TO_RUN in
"1")
    elgato lights --discover
    echo ---
    elgato lights
    echo "Press enter to return"
    read
;;
"2")
    elgato on
;;

"3")
  elgato off
  ;;

"4")
  elgato brightness --dimmer
  ;;

"5")
  elgato color --warmer
  ;;

"6")
  elgato color --cooler
  ;;

*)
   exit
  ;;
esac
done
EOF

chmod 755 /usr/bin/elgatotui

cat << EOF > /usr/share/applications/elgatotui.desktop
[Desktop Entry]
Name=Keylight TUI
Icon=preferences-desktop-peripherals
Type=Application
Exec=xterm -t elgatotui
Terminal=false
Categories=Development;Settings;
EOF




cat << EOF > /usr/share/applications/streamdeck.desktop
[Desktop Entry]
Name=Streamdeck UI
Icon=preferences-desktop-peripherals
Type=Application
Exec=streamdeck
Terminal=false
Categories=Development;Settings;
EOF


#UPnP rendering
mkdir -p /opt/gmrender-resurrect


sudo apt-get -y install libupnp-dev libgstreamer1.0-dev \
gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-nice \
gstreamer1.0-libav gstreamer1.0-pulseaudio gstreamer1.0-opencv uuid-runtime

sudo apt-get -y install autoconf autogen automake libtool pkg-config build-essential


unpack /filesystem/gmrender-resurrect /opt/gmrender-resurrect
cd /opt/gmrender-resurrect
./autogen.sh
./configure
make
make install

pip3 install hardline

cat << EOF > /etc/systemd/system/ember-gmrender.service
[Unit]
Description=Act as a UPNP media rendering server
After=systemd-remount-fs.service network-online.target
RequiresMountsFor=/etc/ /sketch/ /home/

[Service]
Type=simple
ExecStart=bash -c '/usr/bin/pw-jack gmediarender -f "$(cat /etc/hostname)" -u "$(uuidgen)" --gstout-audiopipe=jackaudiosink'
User=1000
WorkingDirectory=~
AmbientCapabilities=CAP_SYS_NICE
Environment="DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus"
Environment="XDG_RUNTIME_DIR=/run/user/1000"
SecureBits=keep-caps


[Install]
WantedBy=sysinit.target

EOF


cat << EOF > /etc/systemd/system/hardlinep2p.service
[Unit]
Description=HardlineP2P allows accessing and service self-hosted resources without manual DNS or cert setup.
After=systemd-remount-fs.service network-online.target fs_bindings.service
RequiresMountsFor=/etc/ /sketch/ /home/

[Service]
Type=simple
ExecStart=hardlined
Restart=on-failure
RestartSec=5s


[Install]
WantedBy=sysinit.target
EOF

mkdir -p /etc/hardline/services/


apt-get -y install gnuradio gnuradio-dev rtl-sdr gr-osmosdr gr-limesdr gr-dab gr-rds gr-air-modes rtl-433 welle.io


# Printerie
apt-get -y install cups cups-ipp-utils cups-core-drivers system-config-printer printer-driver-brlaser



usermod -a -G lpadmin pi


apt-get -y install smbclient samba samba-common-bin cifs-utils minidlna

unpack /filesystem/bin /usr/bin/ root
chmod 755 /usr/bin/wikioffline
mkdir -p /var/www/html/webmap
unpack /filesystem/webmap /var/www/html/webmap





cat << EOF > /etc/systemd/system/zimserver@.service
[Unit]
Description=Serve wikis
After=systemd-remount-fs.service network-online.target
RequiresMountsFor=/etc/ /sketch/ /home/

[Service]
Type=simple
ExecStart=wikioffline %i
User=1000
WorkingDirectory=~


[Install]
WantedBy=sysinit.target
EOF



apt-get -y install mosquitto libpng16-16 chromium-browser rpi-chromium-mods batmand batctl dhtnode ntpdate
systemctl disable dhtnode.service

mkdir -p /etc/mosquitto/conf.d/

cat <<EOF > /etc/mosquitto.conf
persistence false
listener 1883
allow_anonymous true

# Disable's Nagle's algorithm on the assumption that we
# will be doing small numbers of short packages.
set_tcp_nodelay true
EOF
systemctl disable mosquitto.service


# SyncThing is installed, but not set up!!!
wget -O - https://syncthing.net/release-key.txt > /etc/apt/trusted.gpg.d/syncthing.asc
echo "deb http://apt.syncthing.net/ syncthing release" | sudo tee -a /etc/apt/sources.list.d/syncthing-release.list


#Retroshare
#wget -qO - http://download.opensuse.org/repositories/network:retroshare/Raspbian_9.0/Release.key | sudo apt-key add -
sudo cp /filesystem/retroshare.pubkey /etc/apt/trusted.gpg.d/retroshare.asc
echo 'deb http://download.opensuse.org/repositories/network:/retroshare/Raspbian_9.0/ /' > /etc/apt/sources.list.d/retroshare.list

#Something seems to break when we ubgrade curl and libcurl,
#so do it explicitly here, right before and update to hopefully fix that.
apt-get -y install curl libcurl4 syncthing

sudo apt-get update

if [ -z "$EMBER_MICRO" ]
then
sudo apt-get -y install syncthing-gtk retroshare 
fi





#HW drivers, gamepad mapping app
sudo apt-get -y install xboxdrv xserver-xorg-input-wacom xserver-xorg-input-joystick antimicro 

# Common smartcard reader drivers
apt-get -y install pcscd libpcsclite1 libpcsclite-dev pcsc-tools libtowitoko2 libccid libgempc430 libasedrive-usb opensc libnfc6

apt-get -y install cardpeek

apt-get -y install firmware-realtek python3-gattlib

sudo apt-get install -y python3-pyscard


##This is currently not included, it has some challenges getting install to work
#Add the YT client
# cd /filesystem/tartube
# python3 setup.py install

# #Hack-around for something setup.py should have beed doing for us
# mkdir -p /usr/share/tartube/icons
# cp -ar icons/. /usr/share/tartube/icons

#Also gets firewalld
# apt-get -y install firewall-config



#Batteries included, allow messing with kiosk browser media right from the device
apt-get -y install lame gnome-disk-utility gnome-firmware unclutter imagemagick p7zip ark testdisk


#Ham radio stuff
apt-get -y install fldigi flrig flmsg flamp chirp librtlsdr0 wsjtx



if [ -z "$EMBER_MICRO" ]
then
apt-get install -y wxhexeditor d-feet
fi

# GUI Utils
apt-get -y install sqlitebrowser meld git-cola convertall  nmapsi4 qtqr lxappearance

# parcellite

apt-get -y install ffmpegthumbnailer heif-thumbnailer webp


mkdir -p /usr/share/thumbnailers/
# We use a ton of webp
cat << EOF > /usr/share/thumbnailers/webp.thumbnailer
[Thumbnailer Entry]
Exec=/usr/bin/dwebp %i -scale 80 80 -o %o
MimeType=image/x-webp;image/webp;
EOF

# Do not add bluez-utils, bluez replaces it.
apt-get -y install transmission-cli xclip  bluetooth bluez blueman btscanner x11-apps 

apt-get -y install mpv libgdk-pixbuf2.0-bin gpsd gpsd-clients dosbox sshpass lirc

systemctl disable lircd.service

systemctl disable gpsd.service 

#retext is used for markdown help text
apt-get -y install retext
#Try to fix missing icons
sudo ln -s /usr/lib/*/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders /usr/local/bin/gdk-pixbuf-query-loaders
gdk-pixbuf-query-loaders > /usr/lib/arm-linux-gnueabihf/gdk-pixbuf-2.0/2.10.0/loaders.cache

update-icon-caches /usr/share/icons/*

apt-get -y install python3 grsync screengrab shared-mime-info rdiff-backup 

apt-get -y install python3-setproctitle python3-cffi python3-dbus python3-pydbus python3-scipy python3-numpy python3-sympy python3-smbus python3-pyaudio python3-pexpect python3-pydub 
apt-get -y install python3-future
#All the different FSes that you might want to have
apt-get -y install btrfs-progs nilfs-tools f2fs-tools xfsprogs exfat-utils btrfsmaintenance btrfs-compsize



cat << EOF > /usr/share/applications/ArchWiki.desktop
[Desktop Entry]
Comment=
Terminal=false
Name=Arch Wiki Offline
Exec=xterm -hold -e "bash -c 'sudo systemctl start wikioffline@archlinux:1338.service && chromium-browser http://localhost:1338'"
Type=Application
Icon=help-contents
Categories=Development
EOF


apt-get -y install autopsy


cat << EOF > /usr/bin/ember-run-autopsy
#!/bin/bash
xterm -hold -e "sudo autopsy" &
echo "Launching browser.  If you do not have passwordless sudo, enter password and refresh page"
sleep 3
chromium-browser http://localhost:9999/autopsy
EOF

chmod 755 /usr/bin/ember-run-autopsy

cat << EOF > /usr/share/applications/autopsy.desktop
[Desktop Entry]
Comment=
Terminal=false
Name=Launch Autopsy
Exec=ember-run-autopsy
Type=Application
Icon=weather-storm
Categories=Development
EOF

# BeeBeep: This is a semi popular offline messaging app
cd /build_cache
! wget -nc -O beebeep-5.8.4-qt5-armv7l.tar.gz https://sourceforge.net/projects/beebeep/files/Raspberry/beebeep-5.8.4-qt5-armv7l.tar.gz/download


mkdir -p /usr/local/share/

cd /usr/local/share

sudo tar zxvf /build_cache/beebeep-5.8.4-qt5-armv7l.tar.gz
sudo chmod a+x /usr/local/share/beebeep-5.8.4-qt5-armv7l/beebeep
sudo ln -s /usr/local/share/beebeep-5.8.4-qt5-armv7l/beebeep /usr/bin/beebeep
sudo apt-get -y install libqt5printsupport5 libqt5multimedia5 libqt5multimedia5-plugins libxcb-screensaver0 libavahi-compat-libdnssd1




#These are Kivy dependancies
apt-get -y install libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
   pkg-config libgl1-mesa-dev libgles2-mesa-dev \
   python3-setuptools libgstreamer1.0-dev git-core \
   gstreamer1.0-plugins-{bad,base,good,ugly} \
   gstreamer1.0-{omx,alsa} python3-dev libmtdev-dev \
   xclip xsel libjpeg-dev



pip3 install kivy

#Python Bluez API
pip3 install tcpbridge

pip3 install faker
pip3 install baresipy
pip3 install yappi
pip3 install automationhat
pip3 install btdht

pip3 install cherrypy
pip3 install adafruit-blinka

pip3 install nimporter
pip3 install pyfirmata
pip3 install python-can
pip3 install pynput
pip3 install enum-compat
pip3 install pynput
pip3 install simpleaudio
pip3 install yeelight
pip3 install upnpclient
pip3 install sqlite3worker
pip3 install pyusb



pip3 install Adafruit-SSD1306
pip3 install Adafruit-BMP
pip3 install Adafruit-BME280
pip3 install Adafruit-PN532
pip3 install Adafruit-ADXL345
pip3 install Adafruit-MPR121
pip3 install Adafruit-WS2801
pip3 install Adafruit-fingerprint
pip3 install Adafruit-MCP3008
pip3 install Adafruit-MotorHAT
pip3 install adafruit-circuitpython-neopixel

pip3 install rpi_ws281x



# These aren't "really" there, it's pure best effort
 ! pip3 install sparkfun-qwiic
 ! pip3 install sparkfun-qwiic-bme280
 ! pip3 install sparkfun-qwiic-keypad
 ! pip3 install sparkfun-qwiic-eeprom
 ! pip3 install sparkfun-qwiic-relay
 ! pip3 install sparkfun-qwiic-tmp102
 ! pip3 install sparkfun-qwiic-serlcd
 ! pip3 install sparkfun-qwiic-cs811
 ! pip3 install sparkfun-qwiic-sgp40
 ! pip3 install sparkfun-qwiic-adxl313
 ! pip3 install sparkfun-qwiic-button
 ! pip3 install sparkfun-qwiic-gpio
 ! pip3 install sparkfun-ublox-gps
 ! pip3 install sparkfun-qwiic-pca9685
 ! pip3 install sparkfun-qwiic-alphanumeric
 ! pip3 install sparkfun-qwiic-joystick
 ! pip3 install sparkfun-qwiic-pir
 ! pip3 install sparkfun-qwiic-as6212
 ! pip3 install sparkfun-qwiic-twist
 ! pip3 install sparkfun-qwiic-rfid
 ! pip3 install sparkfun-qwiic-proximity
 ! pip3 install sparkfun-pi-servo-hat
 ! pip3 install sparkfun-qwiic-micro-oled
 ! pip3 install sparkfun-qwiic-oled-display
 ! pip3 install sparkfun-qwiic-dual-encoder-reader
 ! pip3 install sparkfun-qwiic-titan-gps
 ! pip3 install sparkfun-qwiic-oled-base
 ! pip3 install sparkfun-qwiic-kx13x
 ! pip3 install sparkfun-qwiic-led-stick

 ! pip3 install PyNAU7802

sudo apt-get -y install python3-rtmidi python3-smbus python3-msgpack python3-paho-mqtt python3-gevent python3-falcon python3-mako python3-typeguard python3-paramiko libglib2.0-dev

pip3 install zimply
pip3 install pycryptodome
pip3 install pynacl
pip3 install qrcode
pip3 install bluepy


pip3 install beautifulsoup4
pip3 install toml

pip3 install pi3d
pip3 install pymavlink
pip3 install v4l2ctl
pip3 install Flask

pip3 install scullery


pip3 install npyscreen picotui asciimatics
pip3 install esptool
apt-get -y install libmpv-dev python3-mpv

apt-get install -y php-{bcmath,bz2,intl,gd,mbstring,pgsql,zip,xml,gd,sqlite3,json}
apt-get install libapache2-mod-php -y

#Needed for .htaccess
! a2enmod rewrite
! a2enmod php7.4

#All the compilerie you might want
apt-get -y install python3-dev build-essential gcc cmake make libtool m4 autoconf 


#Very heavy.  B
# apt-get -y install cargo


# apt-get -y install gstreamer1.0-plugins-ugly gstreamer1.0-plugins-bad libgstrtspserver-1.0-0




apt-get -y install python3 systemd cython3 build-essential python3-serial cutecom xoscope sigrok sigrok-firmware-fx2lafw 
apt-get -y install python3-pyqt5 python3-pyqt5.qtsvg python3-pyqt5.qtchart libinput-tools
apt-get -y install python3-tz python3-babel python3-boto3 python3-dateutil lm-sensors python3-lxml python3-six python3-requests avahi-discover python3-psutil backintime-qt4 python3-toml python3-hamlib


#Removed: python3-pyqt5.qtwebkit python3-pyqt5.qtmultimedia python3-pyqt5.qtopengl python3-pyqt5.qtsql python3-pyqt5.qtserialport python3-pyqt5.qtsensors


apt-get -y install python3-netifaces python3-jack-client python3-gst-1.0 python3-libnacl  python3-libusb1 python3-fuse python3-bluez python3-cairosvg  python3-ifaddr python3-pymodbus libbluetooth-dev libcap2-bin

pip3 install beacontools[scan]

#Audio handling
apt-get -y install gstreamer1.0-plugins-good gstreamer1.0-plugins-bad a2jmidid  jack-tools jack-stdio libgstreamer1.0-dev libgstrtspserver-1.0-0 gstreamer1.0-libav gstreamer1.0-pipewire
apt-get -y install swh-plugins tap-plugins caps  gstreamer1.0-plugins-ugly zynaddsubfx vmpk autotalent x42-plugins

apt-get -y install jaaa qjackctl ffmpeg

apt-get -y install libgstreamer-plugins-base1.0-dev

sudo apt-get -y install build-essential autoconf automake libtool pkg-config

pip3 install ansible-core
pip3 install paramiko



apt-get -y install jackd2

#We Uncomment that line to allow the realtime
cat << EOF > /etc/security/limits.d/audio.conf
# Provided by the jackd package.
#
# Changes to this file will be preserved.
#
# If you want to enable/disable realtime permissions, run
#
#    dpkg-reconfigure -p high jackd2

@audio   -  rtprio     95
@audio   -  memlock    unlimited
@audio   -  nice      -19
EOF

# The allow any is needed or else rtkit won't let PipeWire work right.
cat << EOF > /usr/share/polkit-1/actions/org.freedesktop.RealtimeKit1.policy
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE policyconfig PUBLIC
        "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
        "http://www.freedesktop.org/standards/PolicyKit/1/policyconfig.dtd">
<policyconfig>
        <vendor>Lennart Poettering</vendor>

        <action id="org.freedesktop.RealtimeKit1.acquire-high-priority">
                <description>Grant high priority scheduling to a user process</description>
                <description xml:lang="tr">Bir sürece yüksek öncelikli çalışabilme yetkisi ver</description>
                <message>Authentication is required to grant an application high priority scheduling</message>
                <message xml:lang="tr">Sürecin yüksek öncelikli çalıştırılabilmesi için yetki gerekiyor</message>
                <defaults>
                        <allow_any>yes</allow_any>
                        <allow_inactive>yes</allow_inactive>
                        <allow_active>yes</allow_active>
                </defaults>
        </action>

        <action id="org.freedesktop.RealtimeKit1.acquire-real-time">
                <description>Grant realtime scheduling to a user process</description>
                <description xml:lang="tr">Bir sürece gerçek zamanlı çalışabilme yetkisi ver</description>
                <message>Authentication is required to grant an application realtime scheduling</message>
                <message xml:lang="tr">Sürecin gerçek zamanlı çalıştırılabilmesi için yetki gerekiyor</message>
                <defaults>
                        <allow_any>yes</allow_any>
                        <allow_inactive>yes</allow_inactive>
                        <allow_active>yes</allow_active>
                </defaults>
        </action>

</policyconfig>
EOF

cd /build_cache


#This gives us Synchronize which is probably my top favorite most useful one
wget -nc https://galaxy.ansible.com/download/ansible-posix-1.3.0.tar.gz
ansible-galaxy collection install ansible-posix-1.3.0.tar.gz  -p collections

wget -nc https://galaxy.ansible.com/download/community-general-4.2.0.tar.gz

ansible-galaxy collection install community-general-4.2.0.tar.gz  -p collections

wget -nc https://galaxy.ansible.com/download/community-crypto-2.0.2.tar.gz
ansible-galaxy collection install https://galaxy.ansible.com/download/community-crypto-2.0.2.tar.gz  -p collections


#Save over 100MB by using the Sketch folder instead
apt-get -y install fluidsynth  --no-install-recommends
apt-get -y install qsynth  --no-install-recommends


mkdir -p /usr/share/soundfonts/
#Use the soundfont that will be in the sketch folder unless an SF exists there.
! ln -s /usr/share/public.files/emberos/SoundFonts/MuseScore_General.sf3 /usr/share/soundfonts/default.sf3
! ln -s /usr/share/public.files/emberos/SoundFonts/MuseScore_General.sf3 /usr/share/sounds/sf3/default-GM.sf3


systemctl disable bluealsa

#Voice recognition and sythesis
apt-get -y install pocketsphinx  gstreamer1.0-pocketsphinx pocketsphinx pocketsphinx-en-us flite


! adduser pi pulse-access



apt-get autoremove -y --purge
