#!/usr/bin/env bash

# Source error handling, leave this in place
set -x
set -e

export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH:"}/usr/lib/libeatmydata
export LD_PRELOAD=${LD_PRELOAD:+"$LD_PRELOAD "}libeatmydata.so

source /common.sh
#mkdir -p /etc/pulse
#cp /filesystem/defaults.pa /etc/pulse/default.pa
cat << 'EOF' > /etc/ember-sound.ini
#This file allows you to automatically set the volume of all soundcards.
#Set to -1 to disable this behavior.

#Note: The current implementation just tries to set the first 4 cards and skips any errors,
#And it will not affect cards not present at boot
[SetVolume]
volume=0db
EOF

cat << 'EOF' > /usr/bin/ember-manage-audio.py
#!/usr/bin/python3
import subprocess,configparser
import traceback
config = configparser.ConfigParser()
config.read('/etc/ember-sound.ini')

vol = config['SetVolume']['volume']

noSetVol = False
try:
    vol=int(vol)
    if vol==-1:
        noSetVol=True
except:
    pass

if not noSetVol:
    try:
        subprocess.check_call(["amixer", "-c","0", "cset", "numid=1", str(vol)])
    except:
        print(traceback.format_exc())

    try:
        subprocess.check_call(["amixer","-c","1", "cset", "numid=1", str(vol)])
    except:
        print(traceback.format_exc())

    try:
        subprocess.check_call(["amixer","-c","2", "cset", "numid=1", str(vol)])
    except:
        print(traceback.format_exc())

    try:
        subprocess.check_call(["amixer","-c","3", "cset", "numid=1", str(vol)])
    except:
        print(traceback.format_exc())

EOF

chmod 744 /usr/bin/ember-manage-audio.py



cat << EOF > /etc/systemd/system/ember-manage-audio.service
[Unit]
Description=Manage audio
After=sysinit.target


[Service]
Type=oneshot
ExecStart=/usr/bin/ember-manage-audio.py

[Install]
WantedBy=sysinit.target

EOF

chmod 744  /etc/systemd/system/ember-manage-audio.service
systemctl enable ember-manage-audio.service

#No more of this
#apt-get -y install -y pulseaudio-module-jack pulseaudio-module-zeroconf pulsemixer 

#PipeWire

apt-get install -y pipewire libspa-0.2-jack pipewire-audio-client-libraries libspa-0.2-bluetooth 
apt-get remove -y pulseaudio-module-bluetooth

touch /etc/pipewire/media-session.d/with-pulseaudio
sudo cp /usr/share/doc/pipewire/examples/systemd/user/pipewire-pulse.* /etc/systemd/user/

sudo touch /etc/pipewire/media-session.d/with-alsa
sudo cp /usr/share/doc/pipewire/examples/alsa.conf.d/99-pipewire-default.conf /etc/alsa/conf.d/

su -c 'XDG_RUNTIME_DIR="/run/user/$UID" DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus" systemctl --user  disable pulseaudio.socket' pi

su -c 'XDG_RUNTIME_DIR="/run/user/$UID" DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus" systemctl --user  disable pulseaudio.service' pi
su -c 'XDG_RUNTIME_DIR="/run/user/$UID" DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus" systemctl --user enable  pipewire-pulse' pi



cat << EOF > /usr/lib/systemd/user/pipewire-media-session.service
[Unit]
Description=Multimedia Service Session Manager
After=pipewire.service
BindsTo=pipewire.service

[Service]
LockPersonality=yes
MemoryDenyWriteExecute=yes
NoNewPrivileges=yes
RestrictNamespaces=yes
SystemCallArchitectures=native
SystemCallFilter=@system-service
Type=simple
ExecStart=/usr/bin/pipewire-media-session
Restart=on-failure
Slice=session.slice

[Install]
WantedBy=pipewire.service
EOF

su -c 'XDG_RUNTIME_DIR="/run/user/$UID" DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus" systemctl --user enable pipewire-media-session' pi
su -c 'XDG_RUNTIME_DIR="/run/user/$UID" DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus" systemctl --user enable pipewire' pi

su -c 'XDG_RUNTIME_DIR="/run/user/$UID" DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus" systemctl --user mask pulseaudio' pi


touch /etc/pipewire/media-session.d/with-jack
cp /usr/share/doc/pipewire/examples/ld.so.conf.d/pipewire-jack-*.conf /etc/ld.so.conf.d/
ldconfig



cat << EOF > /etc/pipewire/media-session.d/alsa-monitor.conf
# ALSA monitor config file #

properties = {
    # Create a JACK device. This is not enabled by default because
    # it requires that the PipeWire JACK replacement libraries are
    # not used by the session manager, in order to be able to
    # connect to the real JACK server.
    #alsa.jack-device = false

    # Reserve devices.
    #alsa.reserve = true
}

rules = [
    # An array of matches/actions to evaluate.
    {
        # Rules for matching a device or node. It is an array of
        # properties that all need to match the regexp. If any of the
        # matches work, the actions are executed for the object.
        matches = [
            {
                # This matches all cards. These are regular expressions
                # so "." matches one character and ".*" matches many.
                device.name = "~alsa_card.*"
            }
        ]
        actions = {
            # Actions can update properties on the matched object.
            update-props = {
                # Use ALSA-Card-Profile devices. They use UCM or
                # the profile configuration to configure the device
                # and mixer settings.
                api.alsa.use-acp = true

                # Use UCM instead of profile when available. Can be
                # disabled to skip trying to use the UCM profile.
                #api.alsa.use-ucm = true

                # Don't use the hardware mixer for volume control. It
                # will only use software volume. The mixer is still used
                # to mute unused paths based on the selected port.
                #api.alsa.soft-mixer = false

                # Ignore decibel settings of the driver. Can be used to
                # work around buggy drivers that report wrong values.
                #api.alsa.ignore-dB = false

                # The profile set to use for the device. Usually this
                # "default.conf" but can be changed with a udev rule
                # or here.
                #device.profile-set = "profileset-name"

                # The default active profile. Is by default set to "Off".
                #device.profile = "default profile name"

                # Automatically select the best profile. This is the
                # highest priority available profile. This is disabled
                # here and instead implemented in the session manager
                # where it can save and load previous preferences.
                api.acp.auto-profile = false

                # Automatically switch to the highest priority available
                # port. This is disabled here and implemented in the
                # session manager instead.
                api.acp.auto-port = false

                # Other properties can be set here.
                #device.nick = "My Device"
            }
        }
    }
    {
        matches = [
            {
                # Matches all sources. These are regular expressions
                # so "." matches one character and ".*" matches many.
                node.name = "~alsa_input.*"
            }
            {
                # Matches all sinks.
                node.name = "~alsa_output.*"
            }
        ]
        actions = {
            update-props = {
                #node.nick              = "My Node"
                #node.nick              = null
                #priority.driver        = 100
                #priority.session       = 100
                node.pause-on-idle      = false
                #resample.quality       = 4
                #channelmix.normalize   = false
                #channelmix.mix-lfe     = false
                #audio.channels         = 2
                #audio.format           = "S16LE"
                #audio.rate             = 44100
                #audio.position         = "FL,FR"
                api.alsa.period-size   = 256
                #api.alsa.headroom      = 0
                #api.alsa.disable-mmap  = false
                #api.alsa.disable-batch = false
                #api.alsa.use-chmap     = false
                #session.suspend-timeout-seconds = 5      # 0 disables suspend
            }
        }
    }
]

EOF

cat << EOF > /etc/pipewire/jack.conf

# JACK client config file for PipeWire version "0.3.24" #

context.properties = {
    ## Configure properties in the system.
    #mem.warn-mlock  = false
    #mem.allow-mlock = true
    #mem.mlock-all   = false
    log.level        = 0
}

context.spa-libs = {
    #<factory-name regex> = <library-name>
    #
    # Used to find spa factory names. It maps an spa factory name
    # regular expression to a library name that should contain
    # that factory.
    #
    support.* = support/libspa-support
}

context.modules = [
    #{   name = <module-name>
    #    [ args = { <key> = <value> ... } ]
    #    [ flags = [ [ ifexists ] [ nofail ] ]
    #}
    #
    # Loads a module with the given parameters.
    # If ifexists is given, the module is ignored when it is not found.
    # If nofail is given, module initialization failures are ignored.
    #
    #
    # Uses RTKit to boost the data thread priority.
    {   name = libpipewire-module-rtkit
        args = {
            #nice.level   = -11
            #rt.prio      = 88
            #rt.time.soft = 200000
            #rt.time.hard = 200000
        }
        flags = [ ifexists nofail ]
    }

    # The native communication protocol.
    {   name = libpipewire-module-protocol-native }

    # Allows creating nodes that run in the context of the
    # client. Is used by all clients that want to provide
    # data to PipeWire.
    {   name = libpipewire-module-client-node }

    # Allows applications to create metadata objects. It creates
    # a factory for Metadata objects.
    {   name = libpipewire-module-metadata }
]

jack.properties = {
     node.latency = 128/48000
     #jack.merge-monitor  = false
     #jack.short-name     = false
     #jack.filter-name    = false
}

EOF

cat << EOF > /etc/pipewire/media-session.d/bluez-monitor.conf
properties = {
    bluez5.msbc-support = true
    bluez5.sbc-xq-support = true
}
EOF