#!/usr/bin/env bash
# <Script Name>
# <Description what this module does>
# Written by <Author>
# GPL V3
########


# Source error handling, leave this in place
set -x
set -e

apt update -y --allow-releaseinfo-change
apt update

apt install -y ntfs-3g

#The special /sketch partition is for everything that is not part of the image. It is made after the fact.
! mkdir /sketch

#You have to manually copy thos to the manually created sketch template after the fact
! mkdir /sketch_template

raspi-config nonint do_ssh 0
raspi-config nonint do_spi 0
raspi-config nonint do_i2c 0
raspi-config nonint do_camera 0

raspi-config nonint do_overscan 0


#Set up for a US keyboard by default
raspi-config nonint do_configure_keyboard us


#Here's what the old one was
# proc            /proc           proc    defaults          0       0
# PARTUUID=f7a89ab5-01  /boot           vfat    defaults          0       2
# PARTUUID=f7a89ab5-02  /               ext4    defaults,noatime  0       1


## Warning: This just overwrites it entirely. Future versions of raspbian
## Might have some other system FS stuff they need here.

mkdir -p /home/pi/.ssh
mkdir -p /root/.ssh

## 
cat << EOF > /etc/fstab
proc            /proc           proc    defaults          0       0
/dev/mmcblk0p1  /boot           vfat    defaults,noatime,ro          0       2
/dev/mmcblk0p2  /               ext4    defaults,noatime,ro  0       1
/dev/mmcblk0p3 /sketch auto defaults,noatime,nofail,fmask=027,dmask=027,umask=027 0 0
EOF

#Generate an RSA key whenever it does not exist, if we can
#Then move whatever kets we find into the SSH ramdisk.

cat << EOF > /usr/bin/manage_sketch_folder.sh
#!/bin/bash

#This script generates nonexistant keys, and
#Also moves keys into the special tmpfs just for those keys.

#It also binds apache's www stuff
set -e


#TODO Maybe some things in the home folders should persist to the sketch or something

mkdir -p /dev/shm/roothome
mkdir -p /dev/shm/roothome_work

mkdir -p /dev/shm/pihome
mkdir -p /dev/shm/pihome_work

chown pi /dev/shm/pihome
chown pi /dev/shm/pihome_work


mount -t overlay -o lowerdir=/root,upperdir=/dev/shm/roothome,workdir=/dev/shm/roothome_work overlay /root
mount -t overlay -o lowerdir=/home/pi,upperdir=/dev/shm/pihome,workdir=/dev/shm/pihome_work overlay /home/pi


mkdir -p /sketch/ssh/pi
mkdir -p /sketch/ssh/root

if [ ! -f /sketch/ssh/pi/id_rsa ]; then
    cat /dev/zero | ssh-keygen -f /sketch/ssh/pi/id_rsa -q -N ""
fi

if [ ! -f /sketch/ssh/pi/authorized_keys ]; then
    touch /sketch/ssh/pi/authorized_keys
fi

if [ ! -f /sketch/ssh/root/id_rsa ]; then
    cat /dev/zero | ssh-keygen -f /sketch/ssh/root/id_rsa -q -N ""
fi

if [ ! -f /sketch/ssh/root/authorized_keys ]; then
    touch /sketch/ssh/root/authorized_keys
fi

mkdir /dev/shm/unpackthekeys
cp -v -r --preserve=mode,ownership,timestamps /sketch/ssh/pi/. /dev/shm/unpackthekeys
chown -hR pi:pi  /dev/shm/unpackthekeys
chmod -R 600 /dev/shm/unpackthekeys
cp -v -r --preserve=mode,ownership,timestamps /dev/shm/unpackthekeys/. /home/pi/.ssh
rm -r /dev/shm/unpackthekeys

#Nonexistant ssh conf, put the default in the sketch
if [ ! -f /sketch/ssh/ssh_config ]; then
    cp /etc/ssh/ssh_config /sketch/ssh/ssh_config
fi

mount --bind /sketch/ssh/ssh_config /etc/ssh/ssh_config


#Use what is already there as the template
if [ ! -d /sketch/public.www ]; then
    mkdir /sketch/public.www
    cp -v -r /var/www/. /sketch/public.www
fi

mount --bind /sketch/public.www /var/www


#Use what is already there as the template
if [ ! -d /sketch/public.files ]; then
    mkdir /sketch/public.files
fi

#Use what is already there as the template
if [ ! -d /sketch/public.media ]; then
    mkdir /sketch/public.media
fi

#Generate missing SSL keys
if [ ! -f /sketch/kaithem/ssl/certificate.key ] ; then
    mkdir -p /sketch/kaithem/ssl/
    #Look at this race condition here! Someone could steal that private key before we chmod it!
    openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /sketch/kaithem/ssl/certificate.key  -out  /sketch/kaithem/ssl/certificate.cert -subj '/CN=localhost'
fi




EOF

chmod 744 /usr/bin/manage_sketch_folder.sh


cat << EOF > /etc/systemd/system/manage_sketch_folder.service
[Unit]
Description=Manage loading SSH keys into ramdisk
After=systemd-remount-fs.service
Before=sysinit.target
RequiresMountsFor=/etc/
DefaultDependencies=no

[Service]
Type=oneshot
ExecStart=/usr/bin/manage_sketch_folder.sh

[Install]
WantedBy=sysinit.target

EOF

chmod 744 /etc/systemd/system/manage_sketch_folder.service
systemctl enable /etc/systemd/system/manage_sketch_folder.service



#Disable serial debugging, use readonly mode, and ditch the awful resize on first boot
#Because it won't work and who knows what it will do
cat << EOF > /boot/cmdline.txt
dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2  rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait quiet splash plymouth.ignore-serial-consoles ro
EOF
! rm etc/rc3.d/S01resize2fs_once

#Don't try to launch graphically by default
systemctl set-default multi-user.target




source /common.sh
install_cleanup_trap

unpack /filesystem/home/pi /home/pi pi
unpack /filesystem/home/root /root root
unpack /filesystem/boot /boot root

echo "This is an example module, install and set up what you need here!"
echo "$EMBEDPI_VAR"

# Unpack root at the end, so files are modified before
unpack /filesystem/root /



