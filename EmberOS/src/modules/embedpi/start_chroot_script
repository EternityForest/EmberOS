#!/usr/bin/env bash
# <Script Name>
# <Description what this module does>
# Written by <Author>
# GPL V3
########


# Source error handling, leave this in place
set -x
set -e

source /common.sh
install_cleanup_trap


! sudo usermod -a -G dialout pi
! sudo usermod -a -G serial pi
! sudo usermod -a -G pulse-access pi
! sudo usermod -a -G bluetooth pi
! sudo usermod -a -G audio pi


#Force IPv4 for apt updates until such a time as ipv6 is supported everywhere.
echo 'Acquire::ForceIPv4 "true";' | sudo tee /etc/apt/apt.conf.d/99-force-ipv4

apt update -y --allow-releaseinfo-change
apt update


#Enable initramfs which also gives the rescue shell, but mainly we need it to allow BTRFS
sudo apt-get -y install initramfs-tools btrfs-tools


# Do these need to be added too???
# zstd_decompress
# zstd_compress
# xxhash
# lzo_compress
# zlib_deflate
# sha256_generic


cat << EOF > /etc/initramfs-tools/modules
btrfs
xor
zlib_deflate
raid6_pq
EOF
mkdir -p /usr/src/initramfs/

cat << EOF >  /usr/src/initramfs/init
#!/bin/busybox sh

rescue_shell() {
    echo "Something went wrong. Dropping to a shell."
    exec sh
}

# Mount the /proc and /sys filesystems.
mount -t proc none /proc
mount -t sysfs none /sys

# Do your stuff here.
echo "EmberOS Initramfs running!"

# Mount the root filesystem. NOTE!!!
mount -t ext4,btrfs -o ro /dev/mmcblk0p2 /mnt/root || rescue_shell

# Clean up.
umount /proc
umount /sys

# Boot the real thing.
exec switch_root /mnt/root /sbin/init || rescue_shell
EOF


cat << EOF >  /etc/kernel/postinst.d/rpi-initramfs-tools
#!/bin/bash -e
# Environment variables are set by the calling script

version="$1"
bootopt=""

command -v update-initramfs >/dev/null 2>&1 || exit 0

# passing the kernel version is required
if [ -z "${version}" ]; then
        echo >&2 "W: initramfs-tools: ${DPKG_MAINTSCRIPT_PACKAGE:-kernel package} did not pass a version number"
        exit 2
fi

# there are only two kernel types: with and without postfix "-v7+" or "-v8+"
currentversion="$(uname -r)"

# get Â§currenttype from $currentversion
currenttype="<no currenttype>"
echo $currentversion | grep -Pq '^\d+\.\d+\.\d+\+$'
[ $? -eq 0 ] && currenttype="+"
echo $currentversion | grep -Pq '^\d+\.\d+\.\d+-v[78]\+$'
[ $? -eq 0 ] && currenttype="${currentversion#*-}"

# get $newtype from $version
newtype="<no newtype>"
echo $version | grep -Pq '^\d+\.\d+\.\d+\+$'
[ $? -eq 0 ] && newtype="+"
echo $version | grep -Pq '^\d+\.\d+\.\d+-v[78]\+$'
[ $? -eq 0 ] && newtype="${version#*-}"

# we do nothing if the new kernel is not for the same kernel type then the current
# Note that we build all three, but we only want to trigger on the current
if [ "$newtype" != "$currenttype" ]; then
        exit 0
fi

# absolute file name of kernel image may be passed as a second argument;
# create the initrd in the same directory
if [ -n "$2" ]; then
        bootdir=$(dirname "$2")
        bootopt="-b ${bootdir}"
fi

# avoid running multiple times
if [ -n "$DEB_MAINT_PARAMS" ]; then
        eval set -- "$DEB_MAINT_PARAMS"
        if [ -z "$1" ] || [ "$1" != "configure" ]; then
                exit 0
        fi
fi

# We don't use set -e, if some of these stop existing, that's fine.
# Find most recently added kernel folder, assume there are three versions
KERNELNUM=$(ls -Art /lib/modules | tail -n 1|head -n 1 | cut -d- -f1 | cut -d+ -f1)
#Build the three versions we will need
mkinitramfs -o /boot/initramfs-emberos.gz -k ${KERNELNUM}+
mkinitramfs -o /boot/initramfs-emberos-v7.gz -k ${KERNELNUM}-v7+
mkinitramfs -o /boot/initramfs-emberos-v7l.gz -k ${KERNELNUM}-v7l+

EOF
chmod +x /etc/kernel/postinst.d/rpi-initramfs-tools

cp /filesystem/boot/config.txt /boot/config.txt

# Find most recently added kernel folder, assume there are three versions
KERNELNUM=$(ls -Art /lib/modules | tail -n 1|head -n 1 | cut -d- -f1 | cut -d+ -f1)
#Build the three versions we will need
mkinitramfs -o /boot/initramfs-emberos.gz -k ${KERNELNUM}+
mkinitramfs -o /boot/initramfs-emberos-v7.gz -k ${KERNELNUM}-v7+
mkinitramfs -o /boot/initramfs-emberos-v7l.gz -k ${KERNELNUM}-v7l+


cp /boot/config.txt /tmp/bc

echo "initramfs initramfs-emberos.gz" > /boot/config.txt
cat /tmp/bc >> /boot/config.txt


unpack /filesystem/sketch /sketch

mkdir -p /sketch/opt

apt-get -y install -y ntfs-3g git
#Very important!!! Fuse and Fuse3 have a horrible incompatibility because of -o nonempty
apt-get -y install -y bindfs fuse3
#Needed for reading config files
apt-get -y install -y python3-yaml

#For the GUI
apt-get -y install -y fvwm fvwm-icons


#Without this we have all kinds of issues doing startx
apt-get -y install xserver-xorg-legacy
#Allow non-console startx, needed to make kiosk browsing work
#This has to be AFTER the xserver-xorg-legacy to work
sed -i \
    's/allowed_users=console/allowed_users=anybody/' /etc/X11/Xwrapper.config



#The special /sketch partition is for everything that is not part of the image. It is made after the fact.
! mkdir /sketch

raspi-config nonint do_ssh 0
raspi-config nonint do_spi 0
raspi-config nonint do_i2c 0
raspi-config nonint do_camera 0

raspi-config nonint do_overscan 1
#https://www.bountysource.com/issues/35286369-disabling-serial-removes-dev-ttyacm0
raspi-config nonint do_serial 1
raspi-config nonint set_config_var enable_uart 1 /boot/config.txt


#Set up for a US keyboard by default
sudo raspi-config nonint do_change_locale en_US.UTF-8 UTF-8
raspi-config nonint do_configure_keyboard us


#Here's what the old one was
# proc            /proc           proc    defaults          0       0
# PARTUUID=f7a89ab5-01  /boot           vfat    defaults          0       2
# PARTUUID=f7a89ab5-02  /               ext4    defaults,noatime  0       1


## Warning: This just overwrites it entirely. Future versions of raspbian
## Might have some other system FS stuff they need here.

mkdir -p /home/pi/.ssh
mkdir -p /root/.ssh


## 
cat << EOF > /etc/fstab
proc            /proc           proc    defaults          0       0
/dev/mmcblk0p1  /boot           vfat    defaults,noatime,ro          0       2
/dev/mmcblk0p2  /               ext4    defaults,noatime,ro  0       1
/dev/mmcblk0p3 /sketch auto defaults,noatime,nofail,fmask=027,dmask=027,umask=027 0 0
EOF


mkdir -p  /usr/lib/systemd/system.conf.d/

#Set up the watchdog timer to handle really bad crashes
cat << EOF > /usr/lib/systemd/system.conf.d/20-emberos-watchdog.conf
# This file is part of EmberOS, it enables the Pi's hardware watchdog to allow recovery from
# total system crashes
[Manager]
RuntimeWatchdogSec=15
ShutdownWatchdogSec=45min
EOF



mkdir -p /var/www/html/
cat << EOF > /sketch/public.www/index.html

<h1 id="welcome-to-emberos">Welcome to EmberOS</h1>
<p>This is the kiosk start page. It is served from /sketch/kiosk_startpage.html.</p>
<p>You can of course exit back to the shell with Alt+F4.</p>

<h3>Links:</h3>
<a href="/public_files">Public shared files(Including EmberOS offline content at /var/public.files)</a><br>
<a href="/public_media">Public shared media(/var/public.media)</a><br>
<a href="/public_files/emberos/webapps/falstad-simulator-offline-html5/src/circuitjs.html">Circuit Simulator</a>

<h3>Utility</h3>
<p>Note: Don't trust this cert unless you are accessing it via a safe network</p>
<a href="/emberCA.pem">Security certificate for this node</a>

EOF

ln -s /var/public.files /sketch/public.www/public_files
ln -s /var/public.media /sketch/public.www/public_media

#Generate an RSA key whenever it does not exist, if we can
#Then move whatever kets we find into the SSH ramdisk.

cat << 'EOF' > /usr/bin/manage_sketch_folder.sh
#!/bin/bash

#This script generates nonexistant keys, and
#Also moves keys into the special tmpfs just for those keys.

#It also binds apache's www stuff
set -e

mkdir -p /sketch/config

mkdir -p /dev/shm/roothome
mkdir -p /dev/shm/roothome_work


chmod 700 /dev/shm/roothome
chmod 700 /dev/shm/roothome_work


mkdir -p  /sketch/ssh/pi
mkdir -p /sketch/ssh/root

if [ ! -f /sketch/ssh/pi/id_rsa ]; then
    cat /dev/zero | ssh-keygen -f /sketch/ssh/pi/id_rsa -q -N ""
fi

if [ ! -f /sketch/ssh/pi/authorized_keys ]; then
    touch /sketch/ssh/pi/authorized_keys
fi

if [ ! -f /sketch/ssh/root/id_rsa ]; then
    cat /dev/zero | ssh-keygen -f /sketch/ssh/root/id_rsa -q -N ""
fi

if [ ! -f /sketch/ssh/root/authorized_keys ]; then
    touch /sketch/ssh/root/authorized_keys
fi

mount -t overlay -o lowerdir=/root,upperdir=/dev/shm/roothome,workdir=/dev/shm/roothome_work overlay /root



#Use what is already there as the template
if [ ! -d /sketch/public.www ]; then
    mkdir /sketch/public.www
    cp -a /var/www/html/. /sketch/public.www/
fi



#Use what is already there as the template
if [ ! -d /sketch/public.files ]; then
    mkdir /sketch/public.files
fi

#Use what is already there as the template
if [ ! -d /sketch/public.media ]; then
    mkdir /sketch/public.media
fi

#We want to be robust against someone deleting that file
if [ ! -f /sketch/config.private/yggdrasil.conf ]; then
! yggdrasil -genconf -json > /sketch/config.private/yggdrasil.conf
fi


if [ ! -f /sketch/config.private/emberCA.key ] ; then
######################
# Become a Certificate Authority
######################

# Generate private key
openssl genrsa -out /sketch/config.private/emberCA.key 2048
# Generate root certificate
openssl req -x509 -new -nodes -key /sketch/config.private/emberCA.key -sha256 -days 825 -out /sketch/config/emberCA.pem -subj "/C=US/ST=Washington/L=Seattle/O=EmberOS Autogen/OU=A Bash Script/CN=localhost"


#Copy it so it's trusted by browsers
mkdir -p /sketch/config/sslcerts.local/
mkdir -p /sketch/config/sslcerts.local/ember-os
cp /sketch/config/emberCA.pem /sketch/config/sslcerts.local/ember-os/localhost.crt
fi


#Generate missing SSL keys
if [ ! -f /sketch/kaithem/ssl/certificate.key ] ; then
    mkdir -p /sketch/kaithem/ssl/
    #Look at this race condition here! Someone could steal that private key before we chmod it!

    mkdir /dev/shm/kkeytmp
    cd /dev/shm/kkeytmp

######################
# Create CA-signed certs
######################

NAME=localhost
# Generate a private key
openssl genrsa -out localhost.key 2048
# Create a certificate-signing request
openssl req -nodes -new -key localhost.key -out localhost.csr -subj "/C=US/ST=Washington/L=Seattle/O=EmberOS Autogen/OU=A Bash Script/CN=localhost"

# Create a config file for the extensions
cat << 'EOF2' > localhost.ext
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost # Be sure to include the domain name here because Common Name is not so commonly honoured by itself
DNS.2 = *.localhost # Optionally, add additional domains (I've added a subdomain here)
IP.1 = 127.0.0.1 # Optionally, add an IP address (if the connection which you have planned requires it)
EOF2
# Create the signed certificate
openssl x509 -req -in localhost.csr -CA /sketch/config/emberCA.pem -CAkey /sketch/config.private/emberCA.key -CAcreateserial \
-out localhost.crt -days 825 -sha256 -extfile localhost.ext

mv localhost.key /sketch/kaithem/ssl/certificate.key
mv localhost.crt /sketch/kaithem/ssl/certificate.cert
cd /
rm -rf /dev/shm/kkeytmp/
fi
EOF

chmod 744 /usr/bin/manage_sketch_folder.sh

ln -s /sketch/config/emberCA.pem /sketch/public.www/emberCA.pem

cat << EOF > /etc/systemd/system/manage_sketch_folder.service
[Unit]
Description=Manage things from sketch folder
After=systemd-remount-fs.service 
#Before fs_bindings, it sets up the stuff that we are binding.
Before=sysinit.target fs_bindings.service yggdrasil.service
RequiresMountsFor=/etc/ /sketch/ /home/
DefaultDependencies=no

[Service]
Type=oneshot
ExecStart=/usr/bin/manage_sketch_folder.sh

[Install]
WantedBy=sysinit.target

EOF

chmod 744 /etc/systemd/system/manage_sketch_folder.service
systemctl enable /etc/systemd/system/manage_sketch_folder.service





unpack /filesystem/systemd /etc/systemd/system root
unpack /filesystem/bin /usr/bin root 

chmod 744 /etc/systemd/system/fs_bindings.service
chmod 744 /usr/bin/fs_bindings.py
systemctl enable /etc/systemd/system/fs_bindings.service

chmod 744 /etc/systemd/system/runprovisioning.service
chmod 744 /usr/bin/runprovisioning.py
systemctl enable /etc/systemd/system/runprovisioning.service

chmod 744 /etc/systemd/system/serviceconfig.service
chmod 744 /usr/bin/serviceconfig.py
systemctl enable /etc/systemd/system/serviceconfig.service



mkdir -p /sketch/config/filesystem
mkdir -p /root/ssh

cp /filesystem/sketch_git_ignore /sketch/.gitignore

#All of sketch is now a git repo have fun
git init /sketch

#Can't be in the config dir because there is keys in there
mkdir -p /sketch/ssh/etc.ssh

cp -a /etc/ssh/.  /sketch/ssh/etc.ssh/

mkdir -p  /sketch/ssh/pi
mkdir -p /sketch/ssh/root


mkdir -p /var/lib/bluetooth
mkdir -p /etc/bluetooth
mkdir -p /sketch/config.private/var.lib.bluetooth
mkdir -p /sketch/config/etc.bluetooth

! cp -a /etc/bluetooth/.  /sketch/config/etc.bluetooth


cat << EOF > /sketch/config/filesystem/emberos_bluetooth.yaml
/sketch/config/:
    bindfiles:
        etc.bluetooth: /etc/bluetooth    

/sketch/config.private/:
    bindfiles:
        var.lib.bluetooth: /var/lib/bluetooth
EOF


cat << EOF > /sketch/config/filesystem/emberos_sshconf.yaml
/sketch/ssh/etc.ssh:
    mode: '0700'
    user: root
    bindat: /etc/ssh

/sketch/ssh/pi/:
    mode: '0700'
    user: pi
    bindat: /home/pi/.ssh

/sketch/ssh/root: /root/.ssh/
EOF

cat << EOF > /sketch/config/filesystem/readme.md

The bind manager tool takes config files like


    /sketch/config:
        bindat: /etc/sketchconfig

and 


    /sketch/config:
        bindfiles:
            hosts: /etc/hosts
            hostname: /etc/hostname

    /sketch/config/simple: /simple

and merges them together, then uses them to set up bindings.

In this case we are saying: Make /sketch/config viewable at /etc/sketchconfig.

in the second file, we say(Note relative paths), make /etc/sketchconfig/hosts viewable at /etc/hosts

Bindfiles are relative to the main bindat location for that path, or the first configured parent path

## Simple Bindings

The line "/sketch/config/simple: /simple"
binds  /etc/sketchconfig/simple to /simple,
because the path gets rebased on the first configured parent.


EOF

mkdir -p /home/pi/public.files
mkdir -p /home/pi/public.media

#General purpose private persistant area
mkdir -p /sketch/home/pi
mkdir -p /home/pi/persist


cat << EOF > /home/pi/KIOSK_INFO_README_IMPORTANT.txt
This is a kiosk UI! For reliability, almost everything in the home dir starts fresh when rebooting.

Anything saved in this home dir, except the persist, public.files, and public.media folders,
will disappear when the device is powered off!!

For convenience, many things are just shortcuts to these directories, and many programs
have been preconfigured to safe important data there, but you should not trust any folder you
did not verify for yourself.

Also note that public.* folders are truly public. Anyone on the local network may be able to read
them.
EOF

mk_pi_persist_dir () {
  mkdir -p "/sketch/home/pi/$1"
  mkdir -p "/home/pi/$1"

  #Move to sketch, delete original
  ! cp -ar "/home/pi/$1/." "/sketch/home/pi/$1"
  ! rm -r  "/home/pi/$1"
  ln -s "/home/pi/persist/$1" "/home/pi/$1"
}


mkdir -p /home/pi/.local/share
chown pi /home/pi/.local/share
mkdir -p /home/pi/.config
chown pi /home/pi/.config

#Symlink some directories that are pretty obviously useful to persist
#But only the super obviously "Manual" ones that aren't messed with by the system
mk_pi_persist_dir  Documents
mk_pi_persist_dir  Pictures
mk_pi_persist_dir  Music
mk_pi_persist_dir  Downloads
mk_pi_persist_dir  Templates
mk_pi_persist_dir  Videos
mk_pi_persist_dir  Arduino
mk_pi_persist_dir  Books
mk_pi_persist_dir  Projects
mk_pi_persist_dir  Maps
mk_pi_persist_dir  Scratch Projects
mk_pi_persist_dir  Misc
mk_pi_persist_dir  Drawer
mk_pi_persist_dir  Games
mk_pi_persist_dir  Sync
mk_pi_persist_dir  Programs
mk_pi_persist_dir  "Calibre Library"
mk_pi_persist_dir  .config/calibre
mk_pi_persist_dir  .config/Zeal
mk_pi_persist_dir  .ipfs
mk_pi_persist_dir  .go-ipfs
mk_pi_persist_dir  .local/share/jami
mk_pi_persist_dir  .config/jami
mk_pi_persist_dir  .retroshare
mk_pi_persist_dir  .goldendict

mk_pi_persist_dir .local/share/marble
mk_pi_persist_dir .local/share/Zeal

mkdir -p /sketch/home/pi/.local/share/Zeal

mk_pi_persist_dir .config/vlc
mk_pi_persist_dir .config/deluge
mk_pi_persist_dir .config/ardour5
mk_pi_persist_dir .config/sigrok
mk_pi_persist_dir .kodi
mk_pi_persist_dir .purple

#Not actually installing HA at the moment
mk_pi_persist_dir .homeassistant


echo "# Project Notes" > /sketch/home/pi/Documents/README.md
#This one is annoying, it saves EVERYTHING
#to the same session file on exit. But whatever, it's only
#30kb, probably not a significant issue
mk_pi_persist_dir .config/spacefm

mk_pi_persist_dir .wiki_indexes

#Youtube client
mk_pi_persist_dir tartube_data

mk_pi_persist_dir  .fonts
mk_pi_persist_dir  .home_template
mk_pi_persist_dir  .mednafen
mk_pi_persist_dir  .node-red
mk_pi_persist_dir  .npm
mk_pi_persist_dir  .nimble
mk_pi_persist_dir  .viking
mk_pi_persist_dir  .viking_maps
mk_pi_persist_dir  .fldigi
mk_pi_persist_dir  .flrig
mk_pi_persist_dir  .flmsg
mk_pi_persist_dir  .flamp
mk_pi_persist_dir  .syncthing
mk_pi_persist_dir  .syncthing-gtk
mk_pi_persist_dir .local/share/fonts

#Give pi a place to share public stuff, if desired.  We will handle this later with
#a mountpoint.
mkdir -p /sketch/public.files/pi
mkdir -p /sketch/public.media/pi


mkdir -p /sketch/public.media/Pictures
mkdir -p /sketch/public.media/Music
mkdir -p /sketch/public.media/Videos

#The mountpoint
mkdir -p /var/public.media/
mkdir -p /var/public.files/

#Make the example files more discoverable
ln -s /var/public.media/Music/  "/sketch/home/pi/Music/sketch"
ln -s /var/public.media/Pictures/  "/sketch/home/pi/Pictures/sketch"
ln -s /var/public.media/Videos/  "/sketch/home/pi/Videos/sketch"



mkdir -p /sketch/share

mkdir -p /sketch.opt
mkdir -p /usr/bin.sketch

mkdir -p /sketch/opt
mkdir -p /sketch/bin
mkdir -p /sketch/share/fonts
mkdir -p /sketch/share/wikis
mkdir -p /sketch/share/doc/

mkdir /usr/share.sketch

cat << EOF > /sketch/config/filesystem/emberos_share.yaml
/sketch/share/:
    mode: '0755'
    bindat: /usr/share.sketch
/sketch/share/fonts: /usr/local/share/fonts
EOF


cat << EOF > /sketch/config/filesystem/emberos_opt_bin.yaml
/sketch/opt/:
    mode: '0755'
    bindat: /sketch.opt
/sketch/bin/:
    mode: '0755'
    bindat: /usr/bin.sketch
EOF

#Allow the /sketch/bin to work
cat << EOF > /usr/lib/environment.d/98-ember-sketch-bin.conf 
PATH=/usr/bin.sketch:$PATH
EOF


mkdir -p /sketch/config.private
mkdir -p /etc/sketchconfig.private

mkdir -p /sketch/config
mkdir -p /etc/sketchconfig

#This is what sets up the main config dir
cat << EOF > /sketch/config/filesystem/emberos_configdir.yaml
/sketch/config/:
    mode: '0755'
    user: root
    bindat: /etc/sketchconfig

/sketch/config.private:
    mode: '0700'
    user: root
    bindat: /etc/sketchconfig.private
EOF
#Disable serial debugging, use readonly mode, and ditch the awful resize on first boot
#Because it won't work and who knows what it will do
cat << EOF > /boot/cmdline.txt
dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2  rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait quiet splash plymouth.ignore-serial-consoles ro
EOF
! rm etc/rc3.d/S01resize2fs_once
#Don't try to launch graphically by default
systemctl set-default multi-user.target


mkdir -p /sketch/cache/apt/archives
cat << EOF > /sketch/cache/README.md
/sketch/cache/apt/ is equivalent to /var/cache/apt/
EOF
#This is what sets up the main config dir
cat << EOF > /sketch/config/filesystem/emberos_apt.yaml
/sketch/cache/apt/archives:
    mode: '0755'
    user: _apt
    bindat: /var/cache/apt/archives
EOF



unpack /filesystem/home/pi /home/pi pi
unpack /filesystem/home/root /root root
unpack /filesystem/boot /boot root

echo "This is an example module, install and set up what you need here!"
echo "$EMBEDPI_VAR"

# Unpack root at the end, so files are modified before
unpack /filesystem/root /



#These depend on the fact that remounting seems to leave things
#In their place in the layering of mounts
cat << EOF > /usr/bin/writable
#!/bin/bash
mount -o remount,rw /
mount -o remount,rw /boot
mount -o remount,rw /sketch
EOF

cat << EOF > /usr/bin/readonly
#!/bin/bash
mount -o remount,ro /
mount -o remount,ro /boot
EOF

chmod 755 /usr/bin/writable
chmod 755 /usr/bin/readonly


#Hackishly patch this to call readonly first
cat << EOF > /lib/systemd/system/regenerate_ssh_host_keys.service
[Unit]
Description=Regenerate SSH host keys
Before=ssh.service
ConditionFileIsExecutable=/usr/bin/ssh-keygen

[Service]
Type=oneshot
ExecStartPre=-/bin/dd if=/dev/hwrng of=/dev/urandom count=1 bs=4096
ExecStartPre=-/bin/sh -c "/bin/rm -f -v /etc/ssh/ssh_host_*_key*"
ExecStart=/bin/bash -c ' /usr/bin/ssh-keygen -A -v >> /var/log/regenerate_ssh_host_keys.log 2>&1'
ExecStartPost=/bin/bash -c 'for i in /etc/ssh/ssh_host_*_key*; do actualsize=$(wc -c <"$i") ;if [ $actualsize -eq 0 ]; then echo size is 0 bytes ; exit 1 ; fi ; done ; /usr/bin/writable; /bin/systemctl disable regenerate_ssh_host_keys ; /usr/bin/readonly'

[Install]
WantedBy=multi-user.target
EOF



# Setup apache
#################################################################
mkdir -p /public.temp
mkdir -p /sketch/public.www/
mkdir -p /sketch/public.files/


mkdir -p /sketch/public.www

apt-get -y install apache2 

#Enable .htaccess
cp /filesystem/apache2.conf /etc/apache2/apache2.conf

#Give www-data a "window into the root filesystem"
cat << EOF > /sketch/config/filesystem/emberos-www.yaml
/sketch/public.www:
    mode: '0750'
    user:  www-data
    bindat: /var/www/html
EOF

#Make apache configurable
cat << EOF > /sketch/config/filesystem/emberos-apache2.yaml
/sketch/config/apache2:
    mode: '0755'
    user:  www-data
    bindat: /etc/apache2
EOF

mkdir -p /sketch/config/apache2
cp -ar /etc/apache2/. /sketch/config/apache2

######################################################


#Switch to xonsh
apt-get -y install -y elvish fish xonsh xonsh-doc python3-pygments python3-ptk
cat << EOF > /etc/shells
# /etc/shells: valid login shells
/bin/sh
/bin/bash
/bin/rbash
/usr/bin/fish
/usr/bin/elvish
/usr/bin/xonsh
EOF


cat << EOF > /sketch/home/pi/.xonshrc
# Import these as a convenience, so you don't have to
import time
import math
import re
import random
import os
import sys
EOF

ln -s /sketch/home/pi/.xonshrc /home/pi/.xonshrc


