#!/usr/bin/env bash
# <Script Name>
# <Description what this module does>
# Written by <Author>
# GPL V3
########


# Source error handling, leave this in place
set -x
set -e

source /common.sh
install_cleanup_trap


# This can't be used inside the chroot.
mv /bin/udevadm /bin/udevadm-hidden

cat << EOF > /bin/udevadm
#!/bin/bash
echo dummy
EOF

chmod 755 /bin/udevadm


sudo apt-get -y install eatmydata
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH:"}/usr/lib/libeatmydata
export LD_PRELOAD=${LD_PRELOAD:+"$LD_PRELOAD "}libeatmydata.so


curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
sudo apt update

#Cache pip3 downloading.
mkdir -p /build_cache/pip3
mkdir -p /build_cache/pip3/http
mkdir -p /build_cache/pip3/wheels
chown -R root /build_cache/pip3

mkdir -p /root/.cache/pip
mount --bind /build_cache/pip3 /root/.cache/pip



# Install Node.js;
sudo apt-get install -y nodejs yarn npm git make g++ gcc

mkdir -p /build_cache/yarncache/


#Cache while building.  But we will set this back in the end chroot script
yarn config set cache-folder /build_cache/yarncache




# Give option to make some things work headless
# xterm is just a basic terminal in case more complex ones break, and to use for auto-opening things in a lighter terminal
apt-get install -y xserver-xorg-video-dummy xterm
apt-get install -y dialog

#Disable the feature that automatically starts the setup wizard, this would be bad for kiosk use.
! rm /etc/xdg/autostart/piwiz.desktop

#Eliminate the apt-daily updates that can't work anyway on read only roots,
#And were the suspected cause of periodic crashes in real deployments
sudo systemctl mask apt-daily-upgrade
sudo systemctl mask apt-daily.service
sudo systemctl mask apt-daily.timer

systemctl mask systemd-update-utmp.service
systemctl mask systemd-random-seed.service
systemctl disable systemd-update-utmp.service
systemctl disable systemd-random-seed.service
sudo systemctl disable apt-daily-upgrade.timer
sudo systemctl disable apt-daily.timer
sudo systemctl disable apt-daily.service

systemctl disable resize2fs_once.service 

# These apparrently do a lot of disk reads. That's bad to have randomly happen when disk is an SD card.
systemctl disable man-db.service 
systemctl disable man-db.timer


#I find your lack of faith in systemd disturbing
sudo apt-get -y purge rsyslog

# We just have SSH on by default
systemctl disable sshswitch.service

! sudo usermod -a -G dialout pi
! sudo usermod -a -G serial pi
! sudo usermod -a -G pulse-access pi
! sudo usermod -a -G bluetooth pi
! sudo usermod -a -G audio pi
! sudo usermod -a -G plugdev pi
usermod -aG rtkit pi

#Force IPv4 for apt updates until such a time as ipv6 is supported everywhere.
echo 'Acquire::ForceIPv4 "true";' | sudo tee /etc/apt/apt.conf.d/99-force-ipv4




apt update -y --allow-releaseinfo-change
#Upgrade everything BEFORE we build an initramfs
#or don't if it crashe in the quemu on ubuntu
apt-get -y full-upgrade

#This is entirely to trick openjre, which doesn't actually need /proc I don't think, but has an old test that fails without it.
mkdir -p /proc
mount -t tmpfs -o size=10M tmpfs /proc


# Apt update just the stuff that is likely to break or be a big problem if not updated.

cat << EOF >> /etc/systemd/user/ember-update.timer
[Unit]
Description=EmberOS minimal updater, just the stuff that will break without it
RefuseManualStart=no # Allow manual starts
RefuseManualStop=no # Allow manual stops 

[Timer]
#Execute job if it missed a run due to machine being off
Persistent=true
OnCalendar=*-*-01 02:00:00
Unit=ember-update.service

[Install]
WantedBy=timers.target
EOF

cat << EOF >> /etc/systemd/user/ember-update.service
[Unit]
Description=EmberOS minimal updater, just the stuff that will break without it
[Service] 

Type=simple
ExecStart=/bin/bash /usr/bin/ember-update.sh
Type=oneshot
EOF

cat << EOF >> /usr/bin/ember-update.sh
#!/bin/bash
apt update
apt install ca-certificates
apt install tzdata
EOF

chmod 755 /usr/bin/ember-update.sh

systemctl enable ember-update.timer
#Ye olde dotte nette runnetyme

# We no longer have the SDK or the ASP.net becayuse we are moving away from AgentDVR which was the original reason to include it.

cd /build_cache
wget -nc https://download.visualstudio.microsoft.com/download/pr/283d08e5-e71b-404d-869c-e6ad820ade07/b46930dd45fd4d898c7f904fe33e566e/dotnet-runtime-3.1.21-linux-arm.tar.gz
# wget -nc https://download.visualstudio.microsoft.com/download/pr/9092f467-8a52-482b-9295-6870e0e7fa73/a1474c461720fee5d82ba8efcd7ea3ce/aspnetcore-runtime-3.1.21-linux-arm.tar.gz
mkdir -p /opt/dotnet
tar zxf dotnet-runtime-3.1.21-linux-arm.tar.gz -C /opt/dotnet
#tar zxf aspnetcore-runtime-3.1.21-linux-arm.tar.gz -C /opt/dotnet

# wget -nc https://download.visualstudio.microsoft.com/download/pr/e401b906-4681-437b-a1c5-21a2d7e0f83c/824371926ae334ac264b91d8234b350c/dotnet-sdk-3.1.415-linux-arm.tar.gz
# tar zxf dotnet-sdk-3.1.415-linux-arm.tar.gz -C /opt/dotnet



apt-get -y install libc6 libgcc1 libgssapi-krb5-2 libicu67 libssl1.1 libstdc++6 zlib1g


#Enable initramfs which also gives the rescue shell, but mainly we need it to allow BTRFS
sudo apt-get -y install initramfs-tools btrfs-progs btrfsmaintenance f2fs-tools elinks busybox


apt-get -y install fuse-overlayfs

#Get new kernel(Actually not full upgrade will handle it)
#sudo apt-get -y install raspberrypi-bootloader rpi-eeprom


unpack /filesystem/systemd /etc/systemd/system root
unpack /filesystem/bin /usr/bin root 






#Make sure we can auto reconnect to bluetooth devices
sed -i 's/AutoEnable=false/AutoEnable=true/g' /etc/bluetooth/main.conf


#TODO why in the toilet does this giver error? Oh well, it's new enought already.
#sudo apt-get -y install raspberrypi-kernel


# Do these need to be added too???
# zstd_decompress
# zstd_compress
# xxhash
# lzo_compress
# zlib_deflate
# sha256_generic



#Enable acting as a USB composite device on pi zero
echo libcomposite >> /etc/modules 



systemctl set-default multi-user.target

#No more annoying popup about ssh passwords.
rm /etc/xdg/lxsession/LXDE-pi/sshpwd.sh

# Here we have 2 filesystems.
# Our read only one is going to just be something like BTRFS.  We really need that compression, but we do not want
# the horrid write amplification nor the unavailability of windows support.


mkdir -p /base_root

# Our upper one can be EXT4.  Note that we use noauto because we do the actual work in the initramfs
# This is just the core system things.  We have more tmpfses in the fsbindings.  We do them there
# because some are actually overlays
cat << EOF > /etc/fstab
proc            /proc           proc    defaults          0       0
UUID=23709a26-1289-4e83-bfe5-2c99d42d276e  /boot           vfat    defaults,noatime,ro          0       2
UUID=33fc23d5-a31d-45ed-8aec-e85f4fb4a436 / btrfs defaults,ro,noatime,nofail 0 0
UUID=c8dd1d93-222c-42e5-9b03-82c24d2433fd /sketch ext4 defaults,rw,noatime,noauto 0 1
tmpfs /media tmpfs  defaults,noatime,nosuid,nodev,noexec,mode=0755,size=1M 0 0
tmpfs /mnt tmpfs  defaults,noatime,nosuid,nodev,noexec,mode=0755,size=1M 0 0
tmpfs /tmp tmpfs  defaults,noatime,nosuid,nodev,mode=1777,size=256M 0 0
tmpfs    /var/log    tmpfs    defaults,noatime,nosuid,mode=0755,size=128M    0 0
tmpfs    /var/lib/logrotate    tmpfs    defaults,noatime,nosuid,mode=0755,size=32m    0 0
tmpfs    /var/lib/sudo    tmpfs    defaults,noatime,nosuid,mode=0700,size=8m    0 0
tmpfs    /var/lib/systemd    tmpfs    defaults,noatime,nosuid,mode=0755,size=64m    0 0
tmpfs   /var/lib/chrony    tmpfs    defaults,noatime,nosuid,mode=0755,size=8m    0 0
tmpfs    /var/tmp    tmpfs    defaults,noatime,nosuid,mode=1777,size=128M    0 0
tmpfs    /var/lib/NetworkManager    tmpfs    defaults,noatime,nosuid,mode=0700,size=64M    0 0
EOF

mkdir -p /sketch/profiles/default


mkdir -p /etc/fsbindings/

mkdir -p /sketch/profiles/default/srv
mkdir -p /sketch/profiles/default/opt
mkdir -p /sketch/profiles/default/usr/bin
mkdir -p /sketch/profiles/default/etc
mkdir -p /sketch/profiles/default/home



cat << EOF > /etc/fsbindings/emberos-pi-home.yaml
__tmpfsoverlay__pi-chrome:
    mode: '700'
    user: pi
    size: 128M
    bindat: /home/pi/.config/chromium

__tmpfs__arduinologspi:
    bindat: /home/pi/.arduino15/logs
    size: 24M
EOF


cat << EOF > /etc/systemd/journald.conf
[Journal]                                                                                                                                                                                                                                                                                                                       
Storage=volatile
Seal=no
SystemMaxUse=24M
RuntimeMaxUse=24M
EOF

cat << EOF > /etc/initramfs-tools/modules
btrfs
xor
zlib_deflate
raid6_pq
f2fs
overlay
ext4
EOF

cp /filesystem/initramfsoverlay.sh /etc/initramfs-tools/scripts/init-bottom/do_overlay.sh

mkdir -p /sketch/profiles/__raw_base_image__
echo "This profile is not a real profile, selecting it runs directly on the raw base" > /sketch/profiles/__raw_base_image__/README.md


echo "default" > /sketch/load-profile


# This is from chesty's overlayroot
# It runs when the initramfs is being built
#It's job is just to give us the functions we need.
cat << EOF > /etc/initramfs-tools/hooks/hooks-ember-overlay
#!/bin/sh

. /usr/share/initramfs-tools/scripts/functions
. /usr/share/initramfs-tools/hook-functions

copy_exec /sbin/fsck
copy_exec /sbin/fsck.f2fs
copy_exec /sbin/fsck.ext4
copy_exec /bin/fsck.btrfs
copy_exec /usr/bin/dialog
EOF

chmod +x /etc/initramfs-tools/hooks/hooks-ember-overlay
chown root /etc/initramfs-tools/hooks/hooks-ember-overlay

chmod +x /etc/initramfs-tools/scripts/init-bottom/do_overlay.sh

cp /filesystem/initramfs_build_hook.sh  /etc/kernel/postinst.d/rpi-initramfs-tools

chown root /etc/kernel/postinst.d/rpi-initramfs-tools

chmod +x /etc/kernel/postinst.d/rpi-initramfs-tools

cp /filesystem/boot/config.txt /boot/config.txt

# Find most recently added kernel folder, assume there are three versions.  We have to do this because of how we are doing
#everything inside initramfs
KERNELNUM=$(ls -Art /lib/modules | tail -n 1|head -n 1 | cut -d- -f1 | cut -d+ -f1)
#Build the three versions we will need
mkinitramfs -o /boot/initramfs-emberos.gz -k ${KERNELNUM}+
mkinitramfs -o /boot/initramfs-emberos-v7.gz -k ${KERNELNUM}-v7+
mkinitramfs -o /boot/initramfs-emberos-v7l.gz -k ${KERNELNUM}-v7l+





mkdir -p /sketch

unpack /filesystem/sketch /sketch
unpack /filesystem/public.files /usr/share/public.files


apt-get -y install ntfs-3g git git-lfs
#Very important!!! Fuse and Fuse3 have a horrible incompatibility because of -o nonempty
apt-get -y install bindfs fuse3
#Needed for reading config files
apt-get -y install python3-yaml



#The special /sketch partition is for everything that is not part of the image. It is made after the fact.
mkdir -p /sketch

raspi-config nonint do_ssh 0
raspi-config nonint do_spi 0
raspi-config nonint do_i2c 0
raspi-config nonint do_camera 0

raspi-config nonint do_overscan 1
#https://www.bountysource.com/issues/35286369-disabling-serial-removes-dev-ttyacm0
raspi-config nonint do_serial 1
raspi-config nonint set_config_var enable_uart 1 /boot/config.txt


#Set up for a US keyboard by default
sudo raspi-config nonint do_change_locale en_US.UTF-8 UTF-8
raspi-config nonint do_configure_keyboard us


#Here's what the old one was
# proc            /proc           proc    defaults          0       0
# PARTUUID=f7a89ab5-01  /boot           vfat    defaults          0       2
# PARTUUID=f7a89ab5-02  /               ext4    defaults,noatime  0       1


## Warning: This just overwrites it entirely. Future versions of raspbian
## Might have some other system FS stuff they need here.

mkdir -p /home/pi/.ssh
mkdir -p /root/.ssh


## 



mkdir -p  /usr/lib/systemd/system.conf.d/

#Set up the watchdog timer to handle really bad crashes
cat << EOF > /usr/lib/systemd/system.conf.d/20-emberos-watchdog.conf
# This file is part of EmberOS, it enables the Pi's hardware watchdog to allow recovery from
# total system crashes
[Manager]
RuntimeWatchdogSec=15
ShutdownWatchdogSec=120
EOF



mkdir -p /var/www/html/

mkdir -p /public.temp


cat << EOF > /var/www/html/index.html

<h1 id="welcome-to-emberos">Welcome to EmberOS</h1>
<p>This is the kiosk start page.</p>
<p>You can of course exit back to the shell with Alt+F4.</p>

<h3>Links to content on this server:</h3>
<a href="/public_files">Public shared files(Including clipart, sfx,books,etc at /usr/share/public.files)</a><br>
<a href="/public_media">Public shared media(/usr/share/public.media)</a><br>
<a href="/public_files/emberos/webapps/falstad-simulator-offline-html5/src/circuitjs.html">HTML5 Circuit Simulator</a><br>
<a href="/public_files/emberos/webapps/htck-Bayeux/index.html">Historic tale construction kit</a><br>
<a href="/public_files/emberos/webapps/miniPaint-master/index.html">Image Editor(In browser)</a><br>
<a href="/public_files/emberos/webapps/svgedit-master/src/editor/svg-editor.html">SVGEdit Vector Graphics(in browser)</a><br>
<a href="/webmap/leaflet_demo.html">World Maps</a>

<h3>Apps by Azgaar</h3>
<a href="/" onclick="javascript:event.target.port=5000">Heraldic Device Generator(Some resources are non-commercial only, must be enabled in the sketch autorun config)</a><br>

<h3>Optional Services</h3>

<p>Enable these in /etc/ember-autostart/99-defaults or with systemctl enable</p>

<dl>
<dt>Rhassspy</dt>
<dd>Voice recognition on port 12101</dd>

<dt>EspruinoHub</dt>
<dd>Ble tools on port 1888</dd>


<dt>Kaithem</dt>
<dd>Automation server on port 8002/ 8001 HTTPS</dd>

<dt>Node Red</dt>
<dd>Ble tools on port 1880</dd>

</dl>

EOF


mkdir -p /boot/runonce

cat << 'EOF' > /boot/runonce/README.md
## RunOnce

Files ending with .sh or in this folder will be ran and then deleted when the system boots.  They will run after filesystems have loaded.
They will must have the proper shebang line.
EOF
#Generate an RSA key whenever it does not exist, if we can
#Then move whatever kets we find into the SSH ramdisk.


cat << 'EOF' > /bin/ember-do-runonce.py
#!/usr/bin/python3

import os
import subprocess
import traceback

d1 ="/boot/runonce/"

def runall(d):
    if os.path.exists(d):
        for i in list(os.listdir(d)):
            print("running: "+i)
            if i.endswith(".sh"):
                try:
                    subprocess.call([os.path.join(d,i)])
                    os.remove(os.path.join(d,i))
                except:
                    print(traceback.format_exc())
runall(d1)
EOF

chmod 755 /bin/ember-do-runonce.py

cat << EOF > /etc/systemd/system/ember-do-runonce.service
[Unit]
Description=Manage things from sketch folder
After=systemd-remount-fs.service time-sync.target network-online.target sysinit.target
RequiresMountsFor=/etc/ /boot/ /home/

[Service]
Type=oneshot
ExecStart=/bin/ember-do-runonce.py

[Install]
WantedBy=sysinit.target

EOF
systemctl enable ember-do-runonce.service



cat << 'EOF' > /usr/bin/manage_sketch_folder.sh
#!/bin/bash

#This script generates nonexistant keys, and
#Also moves keys into the special tmpfs just for those keys.

dbus-uuidgen --ensure=/etc/machine-id

#It also binds apache's www stuff
set -e


mkdir -p /dev/shm/roothome
mkdir -p /dev/shm/roothome_work


chmod 700 /dev/shm/roothome
chmod 700 /dev/shm/roothome_work


mkdir -p  /etc/ssh/pi
mkdir -p /etc/ssh/root

if [ ! -f /etc/ssh/pi/id_rsa ]; then
    cat /dev/zero | ssh-keygen -f /etc/ssh/pi/id_rsa -q -N ""
fi

if [ ! -f /etc/ssh/pi/authorized_keys ]; then
    touch /etc/ssh/pi/authorized_keys
fi

if [ ! -f /etc/ssh/root/id_rsa ]; then
    cat /dev/zero | ssh-keygen -f /etc/ssh/root/id_rsa -q -N ""
fi

if [ ! -f /etc/ssh/root/authorized_keys ]; then
    touch /etc/ssh/root/authorized_keys
fi




#We want to be robust against someone deleting that file
if [ ! -f /etc/yggdrasil.conf ]; then
! yggdrasil -genconf -json > /etc/yggdrasil.conf
fi



if [ ! -f /etc/ember-local-ca/emberCA.key ] ; then
mkdir -p /etc/ember-local-ca/
chmod 700 /etc/ember-local-ca/
mkdir -p /etc/ember-local-ca-cert

######################
# Become a Certificate Authority
######################
# Generate private key
openssl genrsa -out /etc/ember-local-ca/emberCA.key 2048
# Generate root certificate
openssl req -x509 -new -nodes -key /etc/ember-local-ca/emberCA.key -sha256 -days 825 -out /etc/ember-local-ca/emberCA.pem -subj "/C=US/ST=Washington/L=Seattle/O=EmberOS Autogen/OU=A Bash Script/CN=localhost"
fi



#Generate missing SSL keys for Kaithem
if [ ! -f /home/pi/kaithem/ssl/certificate.key ] ; then
    mkdir -p /home/pi/kaithem/ssl/
    #Look at this race condition here! Someone could steal that private key before we chmod it!
    mkdir /dev/shm/kkeytmp
    cd /dev/shm/kkeytmp

    ######################
    # Create CA-signed certs
    ######################

    NAME=localhost
    # Generate a private key
    openssl genrsa -out localhost.key 2048
    # Create a certificate-signing request
    openssl req -nodes -new -key localhost.key -out localhost.csr -subj "/C=US/ST=Washington/L=Seattle/O=EmberOS Autogen/OU=A Bash Script/CN=localhost"

    # Create a config file for the extensions
cat << 'EOF2' > localhost.ext
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost # Be sure to include the domain name here because Common Name is not so commonly honoured by itself
DNS.2 = *.localhost # Optionally, add additional domains (I've added a subdomain here)
IP.1 = 127.0.0.1 # Optionally, add an IP address (if the connection which you have planned requires it)
EOF2
    # Create the signed certificate
    openssl x509 -req -in localhost.csr -CA /etc/ember-local-ca/emberCA.pem -CAkey /etc/ember-local-ca/emberCA.key -CAcreateserial \
    -out localhost.crt -days 825 -sha256 -extfile localhost.ext

    mv localhost.key /home/pi/kaithem/ssl/certificate.key
    mv localhost.crt /home/pi/kaithem/ssl/certificate.cert
    chmod 700 -R /home/pi/kaithem/ssl/
    chown pi -R /home/pi/kaithem/ssl/
    cd /
    rm -rf /dev/shm/kkeytmp/
fi
EOF

chmod 755 /usr/bin/manage_sketch_folder.sh
chmod 755 /usr/bin/ember-neofetch-warn


cat << EOF > /home/pi/.gitconfig
[filter "lfs"]
        smudge = git-lfs smudge -- %f
        process = git-lfs filter-process
        required = true
        clean = git-lfs clean -- %f

EOF

cat << EOF > /etc/systemd/system/manage_sketch_folder.service
[Unit]
Description=A bunch of misc stuff. Named for historical reasons.
After=systemd-remount-fs.service 
#Before fs_bindings, it sets up the stuff that we are binding.
Before=sysinit.target fs_bindings.service yggdrasil.service graphical.target multi-user.target NetworkManager.service
RequiresMountsFor=/etc/ /sketch/ /home/
DefaultDependencies=no

[Service]
Type=oneshot
ExecStart=/usr/bin/manage_sketch_folder.sh

[Install]
WantedBy=sysinit.target

EOF

chmod 744 /etc/systemd/system/manage_sketch_folder.service
systemctl enable /etc/systemd/system/manage_sketch_folder.service







chmod 744 /etc/systemd/system/fs_bindings.service
chmod 755 /usr/bin/fs_bindings.py
systemctl enable /etc/systemd/system/fs_bindings.service


chmod 755 /etc/systemd/system/serviceconfig.service
chmod 755 /usr/bin/serviceconfig.py
systemctl enable /etc/systemd/system/serviceconfig.service



mkdir -p /etc/fsbindings
mkdir -p /root/ssh








mkdir -p /etc/chromium/
# override-insecure-http.local bypasses restrictions on insecure origins.  The intended use case is
# to enable local RTC signalling.  If an attacker can trick you into going to a bad site on this domain,
# they have already won and could just trick you into going to their site.  If incompetent people use this
# for bad things, and they're on your lan.. you've already lost.  And it is fairly obviously a shady looking url.
cat << EOF > /etc/chromium/policies/recommended/emberos-policy.json
{
  "AudioCaptureAllowedUrls": ["http://localhost","http://localhost:8002","https://localhost:8001", "http://localhost:1880"],
  "VideoCaptureAllowedUrls": ["http://localhost","http://localhost:8002","https://localhost:8001", "http://localhost:1880"],
  "AutoplayWhitelist":       ["http://localhost","http://localhost:8002", "https://localhost:8001","http://localhost:1880", "http://*.local"],
}
EOF

cat << EOF > /etc/fsbindings/readme.md

The bind manager tool takes config files like


    /sketch/config:
        bindat: /etc/sketchconfig

and 


    /sketch/config:
        bindfiles:
            hosts: /etc/hosts
            hostname: /etc/hostname

    /sketch/config/simple: /simple

and merges them together, then uses them to set up bindings.

In this case we are saying: Make /sketch/config viewable at /etc/sketchconfig.

in the second file, we say(Note relative paths), make /etc/sketchconfig/hosts viewable at /etc/hosts

Bindfiles are relative to the main bindat location for that path, or the first configured parent path

## Simple Bindings

The line "/sketch/config/simple: /simple"
binds  /etc/sketchconfig/simple to /simple,
because the path gets rebased on the first configured parent.


EOF

mkdir -p /home/pi/public.files
mkdir -p /home/pi/public.media


# We are going to share our cached marble maps tiles with the world
# Bit of a privacy issue as it reveals where you have been looking
ln -s /home/pi/.local/share/marble/maps /var/www/html/marblemaps




cat << EOF > /home/pi/KIOSK_INFO_README_IMPORTANT.txt
Note that public.* folders are truly public. Anyone on the local network may be able to read
them.
EOF


mkdir -p /home/pi/.config/environment.d/
cat << EOF > /home/pi/.config/environment.d/99-ember.conf
#TERRIBLE hacks to ensure features of systemd services always work by making these hardcoded
XDG_RUNTIME_DIR=/run/user/1000
PATH=$PATH:/opt/dotnet
DOTNET_ROOT=/opt/dotnet
DOTNET_CLI_TELEMETRY_OPTOUT=1
EOF


cat << EOF > /etc/security/limits.conf
@audio   -  rtprio     95
@audio   -  memlock    unlimited
@audio   -  priority   -20
EOF

mkdir -p /home/pi/.local/share
chown pi /home/pi/.local/share
mkdir -p /home/pi/.config


chown -R pi /home/pi/
mkdir -p /home/pi/Documents/
echo "# Project Notes" > /home/pi/Documents/README.md


#Make the dir for arduino, but we're gonna specifically redirect the log dir to a volatile folder.
mkdir -p /home/pi/.arduino15/logs



#Give pi a place to share public stuff, if desired.  We will handle this later with
#a mountpoint.
mkdir -p /usr/share/public.files/pi
mkdir -p /usr/share/public.media/pi


mkdir -p /usr/share/public.media/Pictures
mkdir -p /usr/share/public.media/Music
mkdir -p /usr/share/public.media/Videos

#The mountpoint
mkdir -p /usr/share/public.media/
mkdir -p /usr/share/public.files/

mkdir -p /home/pi/Music/
mkdir -p /home/pi/Pictures/
mkdir -p /home/pi/Videos/

#Make the example files more discoverable
ln -s /usr/share/public.media/Music/  "/home/pi/Music/sketch.public"
ln -s /usr/share/public.media/Pictures/  "/home/pi/Pictures/sketch.public"
ln -s /usr/share/public.media/Videos/  "/home/pi/Videos/sketch.public"








mkdir -p /usr/share.sketch

cat << EOF > /usr/lib/environment.d/98-ember-environment.conf 
PATH=$PATH:/opt/dotnet
DOTNET_ROOT=/opt/dotnet
DOTNET_CLI_TELEMETRY_OPTOUT=1
EOF



#Compress the RAM, because we have no real swap space
chmod 755 /usr/bin/ember-activate-zram.sh
systemctl enable ember-activate-zram.service


chmod 755 /usr/bin/bluetooth-autoconnect.py
#systemctl enable bluetooth-autoconnect.service



#Disable serial debugging, use readonly mode, and ditch the awful resize on first boot
#Because it won't work and who knows what it will do
cat << EOF > /boot/cmdline.txt
dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2  rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait quiet splash plymouth.ignore-serial-consoles ro
EOF
! rm etc/rc3.d/S01resize2fs_once





unpack /filesystem/home/pi /home/pi pi
unpack /filesystem/home/root /root root
unpack /filesystem/boot /boot root
unpack /filesystem/bin /usr/bin root
unpack /filesystem/public.files /usr/share/public.files root
unpack /filesystem/boot /boot root

echo "This is an example module, install and set up what you need here!"
echo "$EMBEDPI_VAR"

# Unpack root at the end, so files are modified before
unpack /filesystem/root /


#These depend on the fact that remounting seems to leave things
#In their place in the layering of mounts
cat << EOF > /usr/bin/writable
#!/bin/bash
mount -o remount,rw,noatime /boot
mount -o remount,rw,noatime /sketch
EOF

cat << EOF > /usr/bin/readonly
#!/bin/bash
mount -o remount,ro /dev/mmcblk0p1 /boot
EOF

chmod 755 /usr/bin/writable
chmod 755 /usr/bin/readonly



# Setup apache
#################################################################

apt-get -y install apache2 

#Enable .htaccess
cp /filesystem/apache2.conf /etc/apache2/apache2.conf
mkdir -p /etc/apache2/sites-available/
cp /filesystem/apache-0-defaults /etc/apache2/sites-available/000-default.conf



######################################################


#Switch to xonsh
apt-get -y install -y elvish fish xonsh python3-pygments python3-ptk cowsay neofetch
cat << EOF > /etc/shells
# /etc/shells: valid login shells
/bin/sh
/bin/bash
/bin/rbash
/usr/bin/fish
/usr/bin/elvish
/usr/bin/xonsh
EOF


sudo apt-get -y install lolcat cowsay

cat << EOF > /etc/nanorc
set linenumbers
set tabsize 4
set smarthome
set smooth
set autoindent
EOF

cat << EOF > /home/pi/.vimrc
" Modified From: https://github.com/AGnias47/UtilityScripts/blob/master/bash/vimrc

if &compatible
    set nocompatible
endif

" Turn on filetype detection
:filetype on

" Turn on syntax highlighting if more than 1 color is available
if &t_Co > 1
    syntax enable
endif

" Turn on auto-indentation for C-syntax languages
:au FileType c,cpp,java set cindent

" Show matching brackets
set showmatch

" Makes backspace behave as expected
set backspace=2

"Set the tab key to 4 spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab

" Turn on visual wrapping
set wrap

"Wrap at 120 characters
set textwidth=120

" Turn on highlighting for searching
set hlsearch

" Show cursor line and column position
set ruler
set number
:set laststatus=2
:set mouse=a
set showmode
EOF


cat /filesystem/xonshrc > /home/pi/.xonshrc


mkdir -p /home/pi/.config/neofetch/ 
cp /filesystem/neofetch.conf /home/pi/.config/neofetch/config.conf



#--------------------------------------------Make random numbers stay random
if [ ! -h /var/lib/systemd/random-seed ] ; then
#This one is actually kind of important for security, so we have a special service just for faking it using the HWRNG
rm -f /var/lib/systemd/random-seed
ln -s /run/random-seed /var/lib/systemd/random-seed
fi

#This is a pregenerated block of randomness used to enhance the security of the randomness we generate at boot.
#This is really not needed, we generate enough at boot, but since we don't save any randomness at shutdown anymore,
#we might as well.

#Note that it is useless here because it is a fixed known thing, this was originally a script run directly on the pi.
#Kept fror consistency and because it still has very minor utility in confusing attacks by people who never find out which ember image
#you are running on, such as some odd HW backdoor that doesn't know about this
touch /etc/distro-random-supplement
chmod 700  /etc/distro-random-supplement
echo "Generating random numbers, this might be a while."


dd bs=1 count=128 if=/dev/random of=/etc/distro-random-supplement >/dev/null


# Even more paranoia, add a block of numbers that can be updated periodically by some later service or ansible job or some such.
touch /etc/random-supplement
chmod 700  /etc/random-supplement
echo "Generating random numbers, this might be a while."


dd bs=1 count=128 if=/dev/random of=/etc/random-supplement >/dev/null

echo "Generated random numbers"





####---------------------------Install boot script. This is our new entropy source-------------------

chmod 755 /usr/bin/embedtools_service.sh
chown root /usr/bin/embedtools_service.sh
chmod 744 /etc/systemd/system/embedtools.service
chown root /etc/systemd/system/embedtools.service

systemctl enable embedtools.service



###-----------------------------------------No systemd profiling storage stuff-----------------------
#Disable systemd services. We can keep the random seed one because we get there first and shim it.
! systemctl disable systemd-readahead-collect.service
! systemctl disable systemd-readahead-replay.service

# Given a filename, a regex pattern to match and a string:
# If found, no change, else append space + string to last line --
# this is used for the single-line /boot/cmdline.txt file.
append2() {
    if grep $2 $1 >/dev/null; then
        echo
    else
        # Not found; insert in file before EOF
        sed -i "s/\'/ $3/g" $1
    fi
}

# Add fastboot, noswap and/or ro to end of /boot/cmdline.txt
append2 /boot/cmdline.txt fastboot fastboot
append2 /boot/cmdline.txt noswap noswap

append2 /boot/cmdline.txt ro^o^t ro





# Given a filename, a regex pattern to match and a replacement string:
# If found, perform replacement, else append file w/replacement on new line.
replaceAppend() {
    if grep $2 $1 >/dev/null; then
        # Pattern found; replace in file
        sed -i "s/$2/$3/g" $1 >/dev/null
    else
        # Not found; append on new line (silently)
        echo $3 | sudo tee -a $1 >/dev/null
    fi
}
replace() {
    if grep $2 $1 >/dev/null; then
        # Pattern found; replace in file
        sed -i "s/$2/$3/g" $1 >/dev/null
    fi
}

replaceAppend /etc/ssh/sshd_config "^.*UsePrivilegeSeparation.*$" "UsePrivilegeSeparation no"
# bbro method (not working in Jessie?):
#rmdir /var/run/sshd
#ln -s /tmp /var/run/sshd

# Change spool permissions in var.conf (rondie/Margaret fix)
replace /usr/lib/tmpfiles.d/var.conf "spool\s*0755" "spool 1777"

# Obsolete: Move dhcpd.resolv.conf to tmpfs. Why would you not use resolvconf?

#Set up symlinks in case we have dhcpcd5
if [ ! -h /var/lib/dhcpcd5 ] ; then
mkdir -p /var/lib/dchp
ln -s /var/lib/dhcp /var/lib/dhcpcd5
fi




# Make edits to fstab

##They should already have /run and /var/lock covered

# make / ro
# tmpfs /var/log tmpfs nodev,nosuid 0 0
# tmpfs /var/tmp tmpfs nodev,nosuid 0 0
# tmpfs /tmp     tmpfs nodev,nosuid 0 0

# and "just a few" a few others....


# We don't want any logging happening before we are able to get this mount up.
chmod 555 /var/log/
# Rest of the compile still needs access to logging
mount -t tmpfs -o size=32M tmpfs /var/log/


apt-get remove -y --force-yes --purge triggerhappy dphys-swapfile fake-hwclock

cat << EOF > /etc/fsbindings/emberos-misc-ramdisks.yaml

__tmpfsoverlay__varliblightdm:
    bindat: /var/lib/lightdm
    mode: '1777'
    user: lightdm
    size: 128M

__tmpfsoverlay__varcachelightdm:
    bindat: /var/cache/lightdm
    mode: '1777'
    user: lightdm
    size: 128M

__tmpfsoverlay__varlibminidlna:
    bindat: /var/lib/minidlna
    mode: '755'
    user: minidlna
    size: 128M



__tmpfsoverlay__varcacheminidlna:
    bindat: /var/cache/minidlna
    mode: '755'
    user: minidlna
    size: 128M

__tmpfsoverlay__varlibminidlna:
    bindat: /var/lib/minidlna
    mode: '755'
    user: minidlna
    size: 128M

__tmpfsoverlay__varcachesamba:
    bindat: /var/cache/samba
    mode: '755'
    user: root
    size: 128M

__tmpfsoverlay__varspoolsamba:
    bindat: /var/spool/samba
    mode: '1777'
    user: root
    size: 128M


__tmpfs__ntp:
    bindat: /var/lib/ntp
    mode: '755'
    user: root
    size: 1M

__tmpfs__publictmp:
    bindat: /public.tmp
    mode: '1777'
    user: root
    size: 32M


__tmpfs__varlibpulse:
    bindat: /var/lib/pulse
    mode: '755'
    user: root
    size: 8MB

__tmpfs__dhcp:
    bindat: /var/lib/dhcp
    mode: '755'
    user: root
    size: 8MB

_tmpfs__rfkill:
    bindat: /var/lib/rfkill
    mode: '755'
    user: root
    size: 8MB

EOF
