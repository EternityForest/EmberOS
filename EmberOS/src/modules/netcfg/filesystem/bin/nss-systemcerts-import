#!/usr/bin/env bash
# Copyright (c) 2012 RaphaÃ«l Barrois
#
# License: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# Path to system-wide certificate store config.
DEFAULT_CERT_STORE="/etc/ca-certificates.conf"

# Path to system-wide NSS database to create
DEFAULT_NSS_DB="/etc/pki/nssdb"

# Binaries
CERTUTIL_BIN="/usr/bin/certutil"

# Path to system-wide certificate repository
SYS_CERT_REPO="/usr/share/ca-certificates"
USER_CERT_REPO="/usr/local/share/ca-certificates"

# certutil options when adding certificates
TRUST_OPTS="C,C,C"
DISTRUST_OPTS="p,p,"

function usage()
{
    local retcode;
    retcode=$1;
    echo -e "Usage: $0 [options]
    Create a NSS database at NSS_DB from the system certificate store at CERT_STORE.
    NSS_DB defaults to ${DEFAULT_NSS_DB}.
    CERT_STORE defaults to ${DEFAULT_CERT_STORE}.
    Options:
    -n, --dry-run: Don't do anything, simply print commands that would be performed
    -s, --system-store CERT_STORE: change path to CERT_STORE
    -d, --nss-db NSS_DB: change path of NSS database to NSS_DB
"
    exit $retcode;
}

# Default parameters
DRY_RUN=0
CERT_STORE=${DEFAULT_CERT_STORE}
NSS_DB=${DEFAULT_NSS_DB}

# Die and show some message to the user
function die_with_message()
{
    local message;
    local exitcode;
    exitcode=$1;
    message="$2";
    echo "Error: ${message}" >&2
    exit ${exitcode};
}

# In dry-run, show the command to run
# In real run, run the actual command.
# Die if it exits with a non-zero exit code.
function run()
{
    local cmd;
    local retcode;
    cmd=$@;
    if [[ "x${DRY_RUN}" != "x0" ]]; then
        echo "[dry-run] ${cmd}";
    else
        echo "${cmd}"
        ${cmd}
        retcode=$?
        if [[ $retcode != 0 ]]; then
            echo "FAILED: '${cmd}' exited with ${retcode}." >&2
            exit $retcode;
        fi
    fi
}

while [[ $# -gt 0 ]]; do
    case $1 in
        "-n"|"--dry-run")
            DRY_RUN=1;;
        "-h"|"--help")
            usage 0;;
        "-s"|"--system-store")
            if [[ $# -lt 2 ]]; then
                die_with_message 1 "--system-store option takes a mandatory argument."
            fi
            CERT_STORE=$2
            shift;;
        "-d"|"--nss-db")
            if [[ $# -lt 2 ]]; then
                die_with_message 1 "--nss-db option takes a mandatory argument."
            fi
            NSS_DB=$2
            shift;;
        *)
            die_with_message 1 "Unknown option $1."
    esac
    shift;
done

NSS_DB_STRING="sql:${NSS_DB}"

# Make sure no previous database exist.
if ${CERTUTIL_BIN} -L -d "${NSS_DB_STRING}" > /dev/null 2>&1; then
    die_with_message 2 "A NSS database already exists at ${NSS_DB}."
fi

# Create database
run mkdir -p ${NSS_DB}
run ${CERTUTIL_BIN} -N -d ${NSS_DB_STRING} --empty-password
# Make sure the NSS database can be read by all users
run chmod a+r ${NSS_DB}/*

# Handle "accepted" certificates
egrep -v '^(#|!|$)' "${CERT_STORE}" | while read cert; do
    run "${CERTUTIL_BIN}" -A -d "${NSS_DB_STRING}" -n $(basename "${cert}") -t "${TRUST_OPTS}" -i "${SYS_CERT_REPO}/${cert}"
done

# Handle "user-added" certificates
shopt -s globstar
for cert in ${USER_CERT_REPO}/**/*.crt; do # Whitespace-safe and recursive
    run "${CERTUTIL_BIN}" -A -d "${NSS_DB_STRING}" -n $(basename "${cert}") -t "${TRUST_OPTS}" -i "${cert}"
done

# Handle "rejected" certificates
grep "^!" "${CERT_STORE}" | sed 's/^!//' | while read cert; do
    if [ ! -f "${SYS_CERT_REPO}/${cert}" ]; then
        echo "Distrusted certificate '${SYS_CERT_REPO}/${cert}' does not exist. Skipping..."
        continue
    fi
    run "${CERTUTIL_BIN}" -A -d "${NSS_DB_STRING}" -n $(basename "${cert}") -t "${DISTRUST_OPTS}" -i "${SYS_CERT_REPO}/${cert}"
done